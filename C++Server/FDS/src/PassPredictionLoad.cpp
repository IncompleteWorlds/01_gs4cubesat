/**
 *  CubeGS
 *  An online Ground Segment for Cubesats and Small Sats
 *  (c) 2016 Incomplete Worlds
 *
 */

#include <iostream>
#include <sstream>
#include <fstream>

using namespace std;

#include "data_model/Mission.h"
#include "data_model/Satellite.h"
#include "data_model/GroundStation.h"

#include "PassPredictionLoad.h"


PassPredictionLoad::PassPredictionLoad()
{
}

PassPredictionLoad::~PassPredictionLoad()
{
}


/** @brief load
  *
  * It loads a pass file describing next passes over a Ground Station
  * Pass file is generated by Orbitron software
  * Example:


Upcoming passes for AO-27
Observer: Didcot, Southampton, United Kingdom
LAT:50.90 LON:-1.40
----------------------------------------------------------------------------------------
 AOS                  TCA                  LOS                  Duration  Max El  Orbit
----------------------------------------------------------------------------------------
 2016/10/31 23:57:05  2016/11/01 00:03:41  2016/11/01 00:10:18  00:13:13   18.06  120665
 2016/11/01 01:36:17  2016/11/01 01:43:51  2016/11/01 01:51:25  00:15:07   78.10  120666
 2016/11/01 03:16:21  2016/11/01 03:22:37  2016/11/01 03:28:53  00:12:31   16.06  120667

  */
void PassPredictionLoad::loadOrbitron(const string& inFileName)
{
    cout << "DEBUG: Loading passes from: " << inFileName << endl;

    if (inFileName.empty() == false) {
        ifstream inFile(inFileName);

        if (inFile.is_open() == true) {
            string    currentLine;
            string    keyword;
            ofstream  outFile;
            bool      stopProcessing = false;

            IW::Mission         mission;
            IW::Satellite       missionSatellite;
            IW::GroundStation   groundStation;

            std::getline(inFile, currentLine);
            cout << "DEBUG: " << currentLine << endl;

            while (inFile.eof() == false && stopProcessing == false) {
                // Skip empty lines
                if (currentLine.empty() == false) {
                    // Satellite
                    if (currentLine.find("Upcoming passes for") != string::npos) {
                        stringstream ss {currentLine};
                        string satelliteName;

                        ss >> keyword;
                        ss >> keyword;
                        ss >> keyword;
                        ss >> satelliteName;

                        bool found = false;

                        // Check whether the satellite correspond with current mission
                        //mission = ToolsQpidIF::getInstance().getCurrentMission(found);

                        // Look for the satellite
                        found = false;
                        //missionSatellite = ToolsQpidIF::getInstance().getSatellite(mission.identifier, satelliteName, found);

                        if (found == false) {
                            cout << "ERROR: Satellite not found in the mission: " << mission.name << endl;
                            cout << "WARNING: Ignoring passes file: " << inFileName << endl;

                            stopProcessing = true;
                            continue;
                        }

                        // Check satellite belongs to the mission
                        bool missionSatelliteFlag = false;

                        for(string currentSatelliteId: mission.listSatellitesId) {
                            if (currentSatelliteId == missionSatellite.identifier) {
                                missionSatelliteFlag = true;
                                break;
                            }
                        }

                        if (missionSatelliteFlag == false) {
                            cout << "ERROR: Satellite: " << satelliteName << " does not found belong to the mission: " << mission.name << endl;
                            cout << "WARNING: Ignoring passes file: " << inFileName << endl;

                            stopProcessing = true;
                            continue;
                        }
                    }

                    // Ground Station
                    if (currentLine.find("Observer:") != string::npos) {
                        stringstream ss {currentLine};
                        string groundStationName;

                        ss >> keyword;

                        // Remove ","
                        ss >> groundStationName;
                        size_t commaPos = groundStationName.find(",");
                        if (commaPos != string::npos) {
                            groundStationName[commaPos] = ' ';
                        }

                        cout << "DEBUG: Ground Station: " << groundStationName << endl;

                        // Look for ground station
                        bool found = false;

                        //groundStation = ToolsQpidIF::getInstance().getGroundStation(groundStationName, found);

                        // If it is not found, stop processing
                        if (found == true) {
                            string outPassFileName = groundStation.code + "_" + missionSatellite.name + "_passes.txt";
                            outFile.open(outPassFileName);

                            if (outFile.is_open() == false) {
                                cout << "ERROR: Unable to open output pass file: " << outPassFileName << endl;
                                cout << "WARNING: Ignoring passes file: " << inFileName << endl;

                                stopProcessing = true;
                                continue;
                            }
                        } else {
                            cout << "ERROR: Ground station not found in the mission: " << mission.name << endl;
                            cout << "WARNING: Ignoring passes file: " << inFileName << endl;

                            stopProcessing = true;
                            continue;
                        }
                    }

                    // Passes
                    if (currentLine.find("AOS") != string::npos) {
                        // Get dashes line
                        std::getline(inFile, currentLine);

                        // Get passes
                        bool endPasses = false;
                        std::getline(inFile, currentLine);

                        if (currentLine.find("Orbit") != string::npos) {
                            //  AOS                  TCA                  LOS                  Duration   Max El Orbit
                            //  2016/10/31 23:57:05  2016/11/01 00:03:41  2016/11/01 00:10:18  00:13:13   18.06  120665

                            while (endPasses == false && inFile.eof() == false) {
                                outFile << currentLine << endl;

                                // End of passes block
                                if (currentLine.find("Orbit") != string::npos) {
                                    endPasses = true;
                                    continue;
                                }

                                // Next pass
                                std::getline(inFile, currentLine);
                            }
                        }
                    }
                }

                std::getline(inFile, currentLine);
                cout << "DEBUG: " << currentLine << endl;
            }

            if (outFile.is_open() == true) {
                outFile.close();
            }
            inFile.close();
        } else {
            cout << "ERROR: Unable to open file: " << inFileName << endl;
        }
    } else {
        cout << "ERROR: Error in input parameter. File name is empty" << endl;
    }
}
