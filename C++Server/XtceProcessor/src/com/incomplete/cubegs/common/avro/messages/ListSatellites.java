/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** List of Satellites of a Mission. It includes the Subsystems of each satellite */
@org.apache.avro.specific.AvroGenerated
public class ListSatellites extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -376907526022009990L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ListSatellites\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"List of Satellites of a Mission. It includes the Subsystems of each satellite\",\"fields\":[{\"name\":\"listSatellites\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Satellite\",\"doc\":\"This record contains the Satellite parameters\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the satellite\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the mission\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the satellite\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Short code of the satellite\"},{\"name\":\"launchDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Launch date. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"listSubsystems\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Subsystem\",\"doc\":\"This record contains the definition of a subsystem\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Subsystem name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the Subsystem\"},{\"name\":\"satelliteName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Satellite name\"}]}}],\"doc\":\"List of subsystems of the satellite\"}]}},\"doc\":\"List of Satellites and Subsystems\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** List of Satellites and Subsystems */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> listSatellites;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ListSatellites() {}

  /**
   * All-args constructor.
   * @param listSatellites List of Satellites and Subsystems
   */
  public ListSatellites(java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> listSatellites) {
    this.listSatellites = listSatellites;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return listSatellites;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: listSatellites = (java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'listSatellites' field.
   * @return List of Satellites and Subsystems
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> getListSatellites() {
    return listSatellites;
  }

  /**
   * Sets the value of the 'listSatellites' field.
   * List of Satellites and Subsystems
   * @param value the value to set.
   */
  public void setListSatellites(java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> value) {
    this.listSatellites = value;
  }

  /**
   * Creates a new ListSatellites RecordBuilder.
   * @return A new ListSatellites RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder();
  }

  /**
   * Creates a new ListSatellites RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ListSatellites RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder(other);
  }

  /**
   * Creates a new ListSatellites RecordBuilder by copying an existing ListSatellites instance.
   * @param other The existing instance to copy.
   * @return A new ListSatellites RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListSatellites other) {
    return new com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder(other);
  }

  /**
   * RecordBuilder for ListSatellites instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ListSatellites>
    implements org.apache.avro.data.RecordBuilder<ListSatellites> {

    /** List of Satellites and Subsystems */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> listSatellites;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listSatellites)) {
        this.listSatellites = data().deepCopy(fields()[0].schema(), other.listSatellites);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ListSatellites instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListSatellites other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.listSatellites)) {
        this.listSatellites = data().deepCopy(fields()[0].schema(), other.listSatellites);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'listSatellites' field.
      * List of Satellites and Subsystems
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> getListSatellites() {
      return listSatellites;
    }

    /**
      * Sets the value of the 'listSatellites' field.
      * List of Satellites and Subsystems
      * @param value The value of 'listSatellites'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder setListSatellites(java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite> value) {
      validate(fields()[0], value);
      this.listSatellites = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'listSatellites' field has been set.
      * List of Satellites and Subsystems
      * @return True if the 'listSatellites' field has been set, false otherwise.
      */
    public boolean hasListSatellites() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'listSatellites' field.
      * List of Satellites and Subsystems
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListSatellites.Builder clearListSatellites() {
      listSatellites = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ListSatellites build() {
      try {
        ListSatellites record = new ListSatellites();
        record.listSatellites = fieldSetFlags()[0] ? this.listSatellites : (java.util.List<com.incomplete.cubegs.common.avro.messages.Satellite>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
