/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** It describes a processed framem. The XTCE TM Processor will generate it. It will be associated to a container. The fields have to be defined beforehand. */
@org.apache.avro.specific.AvroGenerated
public class XTCE_ProcessedFrame extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2536651814619067529L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XTCE_ProcessedFrame\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"It describes a processed framem. The XTCE TM Processor will generate it. It will be associated to a container. The fields have to be defined beforehand.\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"Identifier of the frame\"},{\"name\":\"containerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of container of raw frame\"},{\"name\":\"creationTime\",\"type\":\"long\",\"doc\":\"Milliseconds since 1 Jan 1970\"},{\"name\":\"groups\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GroupProcessedField\",\"doc\":\"It describes a group of processed fields of frame (TM point) that has been already processed. It could contain all fields of a layer\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"Identifier of the group\"},{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProcessedField\",\"doc\":\"It describes a field of frame (TM point) that has been already processed\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Field index in the frame. Position in the frame\"},{\"name\":\"fieldTypeId\",\"type\":\"int\",\"doc\":\"Field Type identifier\"},{\"name\":\"fieldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Duplicated with respect to Field Type Definition\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Calibrated Value of the field\"},{\"name\":\"rawValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Raw Value of the field\"}]}},\"doc\":\"List of field values (TM points values)\"},{\"name\":\"oolFlag\",\"type\":\"boolean\",\"doc\":\"Flag that indicates whether at least one field is OOL\"},{\"name\":\"oolFields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"List of fields that are in OOL state\"}]}}],\"doc\":\"List of group of field values (TM points values)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Identifier of the frame */
  @Deprecated public int id;
  /** Name of container of raw frame */
  @Deprecated public java.lang.String containerName;
  /** Milliseconds since 1 Jan 1970 */
  @Deprecated public long creationTime;
  /** List of group of field values (TM points values) */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> groups;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public XTCE_ProcessedFrame() {}

  /**
   * All-args constructor.
   * @param id Identifier of the frame
   * @param containerName Name of container of raw frame
   * @param creationTime Milliseconds since 1 Jan 1970
   * @param groups List of group of field values (TM points values)
   */
  public XTCE_ProcessedFrame(java.lang.Integer id, java.lang.String containerName, java.lang.Long creationTime, java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> groups) {
    this.id = id;
    this.containerName = containerName;
    this.creationTime = creationTime;
    this.groups = groups;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return containerName;
    case 2: return creationTime;
    case 3: return groups;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: containerName = (java.lang.String)value$; break;
    case 2: creationTime = (java.lang.Long)value$; break;
    case 3: groups = (java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Identifier of the frame
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Identifier of the frame
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'containerName' field.
   * @return Name of container of raw frame
   */
  public java.lang.String getContainerName() {
    return containerName;
  }

  /**
   * Sets the value of the 'containerName' field.
   * Name of container of raw frame
   * @param value the value to set.
   */
  public void setContainerName(java.lang.String value) {
    this.containerName = value;
  }

  /**
   * Gets the value of the 'creationTime' field.
   * @return Milliseconds since 1 Jan 1970
   */
  public java.lang.Long getCreationTime() {
    return creationTime;
  }

  /**
   * Sets the value of the 'creationTime' field.
   * Milliseconds since 1 Jan 1970
   * @param value the value to set.
   */
  public void setCreationTime(java.lang.Long value) {
    this.creationTime = value;
  }

  /**
   * Gets the value of the 'groups' field.
   * @return List of group of field values (TM points values)
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> getGroups() {
    return groups;
  }

  /**
   * Sets the value of the 'groups' field.
   * List of group of field values (TM points values)
   * @param value the value to set.
   */
  public void setGroups(java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> value) {
    this.groups = value;
  }

  /**
   * Creates a new XTCE_ProcessedFrame RecordBuilder.
   * @return A new XTCE_ProcessedFrame RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder();
  }

  /**
   * Creates a new XTCE_ProcessedFrame RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new XTCE_ProcessedFrame RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder(other);
  }

  /**
   * Creates a new XTCE_ProcessedFrame RecordBuilder by copying an existing XTCE_ProcessedFrame instance.
   * @param other The existing instance to copy.
   * @return A new XTCE_ProcessedFrame RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame other) {
    return new com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder(other);
  }

  /**
   * RecordBuilder for XTCE_ProcessedFrame instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<XTCE_ProcessedFrame>
    implements org.apache.avro.data.RecordBuilder<XTCE_ProcessedFrame> {

    /** Identifier of the frame */
    private int id;
    /** Name of container of raw frame */
    private java.lang.String containerName;
    /** Milliseconds since 1 Jan 1970 */
    private long creationTime;
    /** List of group of field values (TM points values) */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> groups;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.containerName)) {
        this.containerName = data().deepCopy(fields()[1].schema(), other.containerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groups)) {
        this.groups = data().deepCopy(fields()[3].schema(), other.groups);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing XTCE_ProcessedFrame instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.containerName)) {
        this.containerName = data().deepCopy(fields()[1].schema(), other.containerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[2].schema(), other.creationTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groups)) {
        this.groups = data().deepCopy(fields()[3].schema(), other.groups);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Identifier of the frame
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Identifier of the frame
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Identifier of the frame
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Identifier of the frame
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'containerName' field.
      * Name of container of raw frame
      * @return The value.
      */
    public java.lang.String getContainerName() {
      return containerName;
    }

    /**
      * Sets the value of the 'containerName' field.
      * Name of container of raw frame
      * @param value The value of 'containerName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder setContainerName(java.lang.String value) {
      validate(fields()[1], value);
      this.containerName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'containerName' field has been set.
      * Name of container of raw frame
      * @return True if the 'containerName' field has been set, false otherwise.
      */
    public boolean hasContainerName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'containerName' field.
      * Name of container of raw frame
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder clearContainerName() {
      containerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTime' field.
      * Milliseconds since 1 Jan 1970
      * @return The value.
      */
    public java.lang.Long getCreationTime() {
      return creationTime;
    }

    /**
      * Sets the value of the 'creationTime' field.
      * Milliseconds since 1 Jan 1970
      * @param value The value of 'creationTime'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder setCreationTime(long value) {
      validate(fields()[2], value);
      this.creationTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTime' field has been set.
      * Milliseconds since 1 Jan 1970
      * @return True if the 'creationTime' field has been set, false otherwise.
      */
    public boolean hasCreationTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'creationTime' field.
      * Milliseconds since 1 Jan 1970
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder clearCreationTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'groups' field.
      * List of group of field values (TM points values)
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> getGroups() {
      return groups;
    }

    /**
      * Sets the value of the 'groups' field.
      * List of group of field values (TM points values)
      * @param value The value of 'groups'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder setGroups(java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField> value) {
      validate(fields()[3], value);
      this.groups = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'groups' field has been set.
      * List of group of field values (TM points values)
      * @return True if the 'groups' field has been set, false otherwise.
      */
    public boolean hasGroups() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'groups' field.
      * List of group of field values (TM points values)
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.XTCE_ProcessedFrame.Builder clearGroups() {
      groups = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public XTCE_ProcessedFrame build() {
      try {
        XTCE_ProcessedFrame record = new XTCE_ProcessedFrame();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.containerName = fieldSetFlags()[1] ? this.containerName : (java.lang.String) defaultValue(fields()[1]);
        record.creationTime = fieldSetFlags()[2] ? this.creationTime : (java.lang.Long) defaultValue(fields()[2]);
        record.groups = fieldSetFlags()[3] ? this.groups : (java.util.List<com.incomplete.cubegs.common.avro.messages.GroupProcessedField>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
