/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A Limit. Range of values; [min, max) */
@org.apache.avro.specific.AvroGenerated
public class Limit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2312042757858189922L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Limit\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"A Limit. Range of values; [min, max)\",\"fields\":[{\"name\":\"identifier\",\"type\":\"int\",\"doc\":\"Unique identifier\"},{\"name\":\"status\",\"type\":\"int\",\"doc\":\"0 - Disabled, 1 - Enabled\"},{\"name\":\"counter\",\"type\":\"int\",\"doc\":\"Number of times of OOL before generating an event or alarm\"},{\"name\":\"minValue\",\"type\":\"double\",\"doc\":\"Mininum value of the range\"},{\"name\":\"maxValue\",\"type\":\"double\",\"doc\":\"Maximum value of the range\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique identifier */
  @Deprecated public int identifier;
  /** 0 - Disabled, 1 - Enabled */
  @Deprecated public int status;
  /** Number of times of OOL before generating an event or alarm */
  @Deprecated public int counter;
  /** Mininum value of the range */
  @Deprecated public double minValue;
  /** Maximum value of the range */
  @Deprecated public double maxValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Limit() {}

  /**
   * All-args constructor.
   * @param identifier Unique identifier
   * @param status 0 - Disabled, 1 - Enabled
   * @param counter Number of times of OOL before generating an event or alarm
   * @param minValue Mininum value of the range
   * @param maxValue Maximum value of the range
   */
  public Limit(java.lang.Integer identifier, java.lang.Integer status, java.lang.Integer counter, java.lang.Double minValue, java.lang.Double maxValue) {
    this.identifier = identifier;
    this.status = status;
    this.counter = counter;
    this.minValue = minValue;
    this.maxValue = maxValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return status;
    case 2: return counter;
    case 3: return minValue;
    case 4: return maxValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (java.lang.Integer)value$; break;
    case 1: status = (java.lang.Integer)value$; break;
    case 2: counter = (java.lang.Integer)value$; break;
    case 3: minValue = (java.lang.Double)value$; break;
    case 4: maxValue = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return Unique identifier
   */
  public java.lang.Integer getIdentifier() {
    return identifier;
  }

  /**
   * Sets the value of the 'identifier' field.
   * Unique identifier
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.Integer value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return 0 - Disabled, 1 - Enabled
   */
  public java.lang.Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * 0 - Disabled, 1 - Enabled
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'counter' field.
   * @return Number of times of OOL before generating an event or alarm
   */
  public java.lang.Integer getCounter() {
    return counter;
  }

  /**
   * Sets the value of the 'counter' field.
   * Number of times of OOL before generating an event or alarm
   * @param value the value to set.
   */
  public void setCounter(java.lang.Integer value) {
    this.counter = value;
  }

  /**
   * Gets the value of the 'minValue' field.
   * @return Mininum value of the range
   */
  public java.lang.Double getMinValue() {
    return minValue;
  }

  /**
   * Sets the value of the 'minValue' field.
   * Mininum value of the range
   * @param value the value to set.
   */
  public void setMinValue(java.lang.Double value) {
    this.minValue = value;
  }

  /**
   * Gets the value of the 'maxValue' field.
   * @return Maximum value of the range
   */
  public java.lang.Double getMaxValue() {
    return maxValue;
  }

  /**
   * Sets the value of the 'maxValue' field.
   * Maximum value of the range
   * @param value the value to set.
   */
  public void setMaxValue(java.lang.Double value) {
    this.maxValue = value;
  }

  /**
   * Creates a new Limit RecordBuilder.
   * @return A new Limit RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Limit.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.Limit.Builder();
  }

  /**
   * Creates a new Limit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Limit RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Limit.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Limit.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.Limit.Builder(other);
  }

  /**
   * Creates a new Limit RecordBuilder by copying an existing Limit instance.
   * @param other The existing instance to copy.
   * @return A new Limit RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Limit.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Limit other) {
    return new com.incomplete.cubegs.common.avro.messages.Limit.Builder(other);
  }

  /**
   * RecordBuilder for Limit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Limit>
    implements org.apache.avro.data.RecordBuilder<Limit> {

    /** Unique identifier */
    private int identifier;
    /** 0 - Disabled, 1 - Enabled */
    private int status;
    /** Number of times of OOL before generating an event or alarm */
    private int counter;
    /** Mininum value of the range */
    private double minValue;
    /** Maximum value of the range */
    private double maxValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Limit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.counter)) {
        this.counter = data().deepCopy(fields()[2].schema(), other.counter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.minValue)) {
        this.minValue = data().deepCopy(fields()[3].schema(), other.minValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxValue)) {
        this.maxValue = data().deepCopy(fields()[4].schema(), other.maxValue);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Limit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Limit other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.counter)) {
        this.counter = data().deepCopy(fields()[2].schema(), other.counter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.minValue)) {
        this.minValue = data().deepCopy(fields()[3].schema(), other.minValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maxValue)) {
        this.maxValue = data().deepCopy(fields()[4].schema(), other.maxValue);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * Unique identifier
      * @return The value.
      */
    public java.lang.Integer getIdentifier() {
      return identifier;
    }

    /**
      * Sets the value of the 'identifier' field.
      * Unique identifier
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder setIdentifier(int value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * Unique identifier
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifier' field.
      * Unique identifier
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder clearIdentifier() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * 0 - Disabled, 1 - Enabled
      * @return The value.
      */
    public java.lang.Integer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * 0 - Disabled, 1 - Enabled
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder setStatus(int value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * 0 - Disabled, 1 - Enabled
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * 0 - Disabled, 1 - Enabled
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder clearStatus() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'counter' field.
      * Number of times of OOL before generating an event or alarm
      * @return The value.
      */
    public java.lang.Integer getCounter() {
      return counter;
    }

    /**
      * Sets the value of the 'counter' field.
      * Number of times of OOL before generating an event or alarm
      * @param value The value of 'counter'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder setCounter(int value) {
      validate(fields()[2], value);
      this.counter = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'counter' field has been set.
      * Number of times of OOL before generating an event or alarm
      * @return True if the 'counter' field has been set, false otherwise.
      */
    public boolean hasCounter() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'counter' field.
      * Number of times of OOL before generating an event or alarm
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder clearCounter() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'minValue' field.
      * Mininum value of the range
      * @return The value.
      */
    public java.lang.Double getMinValue() {
      return minValue;
    }

    /**
      * Sets the value of the 'minValue' field.
      * Mininum value of the range
      * @param value The value of 'minValue'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder setMinValue(double value) {
      validate(fields()[3], value);
      this.minValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'minValue' field has been set.
      * Mininum value of the range
      * @return True if the 'minValue' field has been set, false otherwise.
      */
    public boolean hasMinValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'minValue' field.
      * Mininum value of the range
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder clearMinValue() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxValue' field.
      * Maximum value of the range
      * @return The value.
      */
    public java.lang.Double getMaxValue() {
      return maxValue;
    }

    /**
      * Sets the value of the 'maxValue' field.
      * Maximum value of the range
      * @param value The value of 'maxValue'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder setMaxValue(double value) {
      validate(fields()[4], value);
      this.maxValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'maxValue' field has been set.
      * Maximum value of the range
      * @return True if the 'maxValue' field has been set, false otherwise.
      */
    public boolean hasMaxValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'maxValue' field.
      * Maximum value of the range
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Limit.Builder clearMaxValue() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Limit build() {
      try {
        Limit record = new Limit();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (java.lang.Integer) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.Integer) defaultValue(fields()[1]);
        record.counter = fieldSetFlags()[2] ? this.counter : (java.lang.Integer) defaultValue(fields()[2]);
        record.minValue = fieldSetFlags()[3] ? this.minValue : (java.lang.Double) defaultValue(fields()[3]);
        record.maxValue = fieldSetFlags()[4] ? this.maxValue : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
