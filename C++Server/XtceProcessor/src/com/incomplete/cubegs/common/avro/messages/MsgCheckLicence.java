/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This message checks the validity of the licence of a component. It returns a message to the sender with true or false */
@org.apache.avro.specific.AvroGenerated
public class MsgCheckLicence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3196116748571735162L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgCheckLicence\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This message checks the validity of the licence of a component. It returns a message to the sender with true or false\",\"fields\":[{\"name\":\"componentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Component identifier. It requests to check the licence\"},{\"name\":\"componentSignature\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Signature of the component\"},{\"name\":\"componentFunction\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"List of functions to check whether they are licenced\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Component identifier. It requests to check the licence */
  @Deprecated public java.lang.String componentId;
  /** Signature of the component */
  @Deprecated public java.lang.String componentSignature;
  /** List of functions to check whether they are licenced */
  @Deprecated public java.util.List<java.lang.String> componentFunction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgCheckLicence() {}

  /**
   * All-args constructor.
   * @param componentId Component identifier. It requests to check the licence
   * @param componentSignature Signature of the component
   * @param componentFunction List of functions to check whether they are licenced
   */
  public MsgCheckLicence(java.lang.String componentId, java.lang.String componentSignature, java.util.List<java.lang.String> componentFunction) {
    this.componentId = componentId;
    this.componentSignature = componentSignature;
    this.componentFunction = componentFunction;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return componentId;
    case 1: return componentSignature;
    case 2: return componentFunction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: componentId = (java.lang.String)value$; break;
    case 1: componentSignature = (java.lang.String)value$; break;
    case 2: componentFunction = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'componentId' field.
   * @return Component identifier. It requests to check the licence
   */
  public java.lang.String getComponentId() {
    return componentId;
  }

  /**
   * Sets the value of the 'componentId' field.
   * Component identifier. It requests to check the licence
   * @param value the value to set.
   */
  public void setComponentId(java.lang.String value) {
    this.componentId = value;
  }

  /**
   * Gets the value of the 'componentSignature' field.
   * @return Signature of the component
   */
  public java.lang.String getComponentSignature() {
    return componentSignature;
  }

  /**
   * Sets the value of the 'componentSignature' field.
   * Signature of the component
   * @param value the value to set.
   */
  public void setComponentSignature(java.lang.String value) {
    this.componentSignature = value;
  }

  /**
   * Gets the value of the 'componentFunction' field.
   * @return List of functions to check whether they are licenced
   */
  public java.util.List<java.lang.String> getComponentFunction() {
    return componentFunction;
  }

  /**
   * Sets the value of the 'componentFunction' field.
   * List of functions to check whether they are licenced
   * @param value the value to set.
   */
  public void setComponentFunction(java.util.List<java.lang.String> value) {
    this.componentFunction = value;
  }

  /**
   * Creates a new MsgCheckLicence RecordBuilder.
   * @return A new MsgCheckLicence RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder();
  }

  /**
   * Creates a new MsgCheckLicence RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgCheckLicence RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder(other);
  }

  /**
   * Creates a new MsgCheckLicence RecordBuilder by copying an existing MsgCheckLicence instance.
   * @param other The existing instance to copy.
   * @return A new MsgCheckLicence RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgCheckLicence other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder(other);
  }

  /**
   * RecordBuilder for MsgCheckLicence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgCheckLicence>
    implements org.apache.avro.data.RecordBuilder<MsgCheckLicence> {

    /** Component identifier. It requests to check the licence */
    private java.lang.String componentId;
    /** Signature of the component */
    private java.lang.String componentSignature;
    /** List of functions to check whether they are licenced */
    private java.util.List<java.lang.String> componentFunction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.componentId)) {
        this.componentId = data().deepCopy(fields()[0].schema(), other.componentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.componentSignature)) {
        this.componentSignature = data().deepCopy(fields()[1].schema(), other.componentSignature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.componentFunction)) {
        this.componentFunction = data().deepCopy(fields()[2].schema(), other.componentFunction);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MsgCheckLicence instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgCheckLicence other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.componentId)) {
        this.componentId = data().deepCopy(fields()[0].schema(), other.componentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.componentSignature)) {
        this.componentSignature = data().deepCopy(fields()[1].schema(), other.componentSignature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.componentFunction)) {
        this.componentFunction = data().deepCopy(fields()[2].schema(), other.componentFunction);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'componentId' field.
      * Component identifier. It requests to check the licence
      * @return The value.
      */
    public java.lang.String getComponentId() {
      return componentId;
    }

    /**
      * Sets the value of the 'componentId' field.
      * Component identifier. It requests to check the licence
      * @param value The value of 'componentId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder setComponentId(java.lang.String value) {
      validate(fields()[0], value);
      this.componentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'componentId' field has been set.
      * Component identifier. It requests to check the licence
      * @return True if the 'componentId' field has been set, false otherwise.
      */
    public boolean hasComponentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'componentId' field.
      * Component identifier. It requests to check the licence
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder clearComponentId() {
      componentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'componentSignature' field.
      * Signature of the component
      * @return The value.
      */
    public java.lang.String getComponentSignature() {
      return componentSignature;
    }

    /**
      * Sets the value of the 'componentSignature' field.
      * Signature of the component
      * @param value The value of 'componentSignature'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder setComponentSignature(java.lang.String value) {
      validate(fields()[1], value);
      this.componentSignature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'componentSignature' field has been set.
      * Signature of the component
      * @return True if the 'componentSignature' field has been set, false otherwise.
      */
    public boolean hasComponentSignature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'componentSignature' field.
      * Signature of the component
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder clearComponentSignature() {
      componentSignature = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'componentFunction' field.
      * List of functions to check whether they are licenced
      * @return The value.
      */
    public java.util.List<java.lang.String> getComponentFunction() {
      return componentFunction;
    }

    /**
      * Sets the value of the 'componentFunction' field.
      * List of functions to check whether they are licenced
      * @param value The value of 'componentFunction'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder setComponentFunction(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.componentFunction = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'componentFunction' field has been set.
      * List of functions to check whether they are licenced
      * @return True if the 'componentFunction' field has been set, false otherwise.
      */
    public boolean hasComponentFunction() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'componentFunction' field.
      * List of functions to check whether they are licenced
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgCheckLicence.Builder clearComponentFunction() {
      componentFunction = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MsgCheckLicence build() {
      try {
        MsgCheckLicence record = new MsgCheckLicence();
        record.componentId = fieldSetFlags()[0] ? this.componentId : (java.lang.String) defaultValue(fields()[0]);
        record.componentSignature = fieldSetFlags()[1] ? this.componentSignature : (java.lang.String) defaultValue(fields()[1]);
        record.componentFunction = fieldSetFlags()[2] ? this.componentFunction : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
