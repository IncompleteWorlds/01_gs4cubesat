/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** It defines an argument of a TC */
@org.apache.avro.specific.AvroGenerated
public class TC_Argument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 193569065106501633L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TC_Argument\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"It defines an argument of a TC\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Argument name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the argument\"},{\"name\":\"tcName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TC name\"},{\"name\":\"relativePosition\",\"type\":\"int\",\"doc\":\"Relative position within the TC frame\"},{\"name\":\"lengthBits\",\"type\":\"int\",\"doc\":\"Length in bits of the argument\"},{\"name\":\"argType\",\"type\":\"int\",\"doc\":\"Argument type. Raw type\"},{\"name\":\"argSubType\",\"type\":\"int\",\"doc\":\"Argument sub type\"},{\"name\":\"engType\",\"type\":\"int\",\"doc\":\"Argument engineering type\"},{\"name\":\"units\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Argument units\"},{\"name\":\"prependSize\",\"type\":\"int\",\"doc\":\"Prepend size of a string\"},{\"name\":\"stringTerminator\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"String terminator\"},{\"name\":\"littleEndian\",\"type\":\"int\",\"doc\":\"Little endian flag\"},{\"name\":\"functionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Function name for converting the argument\"},{\"name\":\"defaultValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Argument deafult value\"},{\"name\":\"rangeLow\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Argument range low value\"},{\"name\":\"rangeHigh\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Argument range high value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Argument name */
  @Deprecated public java.lang.String name;
  /** Description of the argument */
  @Deprecated public java.lang.String description;
  /** TC name */
  @Deprecated public java.lang.String tcName;
  /** Relative position within the TC frame */
  @Deprecated public int relativePosition;
  /** Length in bits of the argument */
  @Deprecated public int lengthBits;
  /** Argument type. Raw type */
  @Deprecated public int argType;
  /** Argument sub type */
  @Deprecated public int argSubType;
  /** Argument engineering type */
  @Deprecated public int engType;
  /** Argument units */
  @Deprecated public java.lang.String units;
  /** Prepend size of a string */
  @Deprecated public int prependSize;
  /** String terminator */
  @Deprecated public java.lang.String stringTerminator;
  /** Little endian flag */
  @Deprecated public int littleEndian;
  /** Function name for converting the argument */
  @Deprecated public java.lang.String functionName;
  /** Argument deafult value */
  @Deprecated public java.lang.String defaultValue;
  /** Argument range low value */
  @Deprecated public java.lang.String rangeLow;
  /** Argument range high value */
  @Deprecated public java.lang.String rangeHigh;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TC_Argument() {}

  /**
   * All-args constructor.
   * @param name Argument name
   * @param description Description of the argument
   * @param tcName TC name
   * @param relativePosition Relative position within the TC frame
   * @param lengthBits Length in bits of the argument
   * @param argType Argument type. Raw type
   * @param argSubType Argument sub type
   * @param engType Argument engineering type
   * @param units Argument units
   * @param prependSize Prepend size of a string
   * @param stringTerminator String terminator
   * @param littleEndian Little endian flag
   * @param functionName Function name for converting the argument
   * @param defaultValue Argument deafult value
   * @param rangeLow Argument range low value
   * @param rangeHigh Argument range high value
   */
  public TC_Argument(java.lang.String name, java.lang.String description, java.lang.String tcName, java.lang.Integer relativePosition, java.lang.Integer lengthBits, java.lang.Integer argType, java.lang.Integer argSubType, java.lang.Integer engType, java.lang.String units, java.lang.Integer prependSize, java.lang.String stringTerminator, java.lang.Integer littleEndian, java.lang.String functionName, java.lang.String defaultValue, java.lang.String rangeLow, java.lang.String rangeHigh) {
    this.name = name;
    this.description = description;
    this.tcName = tcName;
    this.relativePosition = relativePosition;
    this.lengthBits = lengthBits;
    this.argType = argType;
    this.argSubType = argSubType;
    this.engType = engType;
    this.units = units;
    this.prependSize = prependSize;
    this.stringTerminator = stringTerminator;
    this.littleEndian = littleEndian;
    this.functionName = functionName;
    this.defaultValue = defaultValue;
    this.rangeLow = rangeLow;
    this.rangeHigh = rangeHigh;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return description;
    case 2: return tcName;
    case 3: return relativePosition;
    case 4: return lengthBits;
    case 5: return argType;
    case 6: return argSubType;
    case 7: return engType;
    case 8: return units;
    case 9: return prependSize;
    case 10: return stringTerminator;
    case 11: return littleEndian;
    case 12: return functionName;
    case 13: return defaultValue;
    case 14: return rangeLow;
    case 15: return rangeHigh;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: description = (java.lang.String)value$; break;
    case 2: tcName = (java.lang.String)value$; break;
    case 3: relativePosition = (java.lang.Integer)value$; break;
    case 4: lengthBits = (java.lang.Integer)value$; break;
    case 5: argType = (java.lang.Integer)value$; break;
    case 6: argSubType = (java.lang.Integer)value$; break;
    case 7: engType = (java.lang.Integer)value$; break;
    case 8: units = (java.lang.String)value$; break;
    case 9: prependSize = (java.lang.Integer)value$; break;
    case 10: stringTerminator = (java.lang.String)value$; break;
    case 11: littleEndian = (java.lang.Integer)value$; break;
    case 12: functionName = (java.lang.String)value$; break;
    case 13: defaultValue = (java.lang.String)value$; break;
    case 14: rangeLow = (java.lang.String)value$; break;
    case 15: rangeHigh = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Argument name
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Argument name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the argument
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the argument
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'tcName' field.
   * @return TC name
   */
  public java.lang.String getTcName() {
    return tcName;
  }

  /**
   * Sets the value of the 'tcName' field.
   * TC name
   * @param value the value to set.
   */
  public void setTcName(java.lang.String value) {
    this.tcName = value;
  }

  /**
   * Gets the value of the 'relativePosition' field.
   * @return Relative position within the TC frame
   */
  public java.lang.Integer getRelativePosition() {
    return relativePosition;
  }

  /**
   * Sets the value of the 'relativePosition' field.
   * Relative position within the TC frame
   * @param value the value to set.
   */
  public void setRelativePosition(java.lang.Integer value) {
    this.relativePosition = value;
  }

  /**
   * Gets the value of the 'lengthBits' field.
   * @return Length in bits of the argument
   */
  public java.lang.Integer getLengthBits() {
    return lengthBits;
  }

  /**
   * Sets the value of the 'lengthBits' field.
   * Length in bits of the argument
   * @param value the value to set.
   */
  public void setLengthBits(java.lang.Integer value) {
    this.lengthBits = value;
  }

  /**
   * Gets the value of the 'argType' field.
   * @return Argument type. Raw type
   */
  public java.lang.Integer getArgType() {
    return argType;
  }

  /**
   * Sets the value of the 'argType' field.
   * Argument type. Raw type
   * @param value the value to set.
   */
  public void setArgType(java.lang.Integer value) {
    this.argType = value;
  }

  /**
   * Gets the value of the 'argSubType' field.
   * @return Argument sub type
   */
  public java.lang.Integer getArgSubType() {
    return argSubType;
  }

  /**
   * Sets the value of the 'argSubType' field.
   * Argument sub type
   * @param value the value to set.
   */
  public void setArgSubType(java.lang.Integer value) {
    this.argSubType = value;
  }

  /**
   * Gets the value of the 'engType' field.
   * @return Argument engineering type
   */
  public java.lang.Integer getEngType() {
    return engType;
  }

  /**
   * Sets the value of the 'engType' field.
   * Argument engineering type
   * @param value the value to set.
   */
  public void setEngType(java.lang.Integer value) {
    this.engType = value;
  }

  /**
   * Gets the value of the 'units' field.
   * @return Argument units
   */
  public java.lang.String getUnits() {
    return units;
  }

  /**
   * Sets the value of the 'units' field.
   * Argument units
   * @param value the value to set.
   */
  public void setUnits(java.lang.String value) {
    this.units = value;
  }

  /**
   * Gets the value of the 'prependSize' field.
   * @return Prepend size of a string
   */
  public java.lang.Integer getPrependSize() {
    return prependSize;
  }

  /**
   * Sets the value of the 'prependSize' field.
   * Prepend size of a string
   * @param value the value to set.
   */
  public void setPrependSize(java.lang.Integer value) {
    this.prependSize = value;
  }

  /**
   * Gets the value of the 'stringTerminator' field.
   * @return String terminator
   */
  public java.lang.String getStringTerminator() {
    return stringTerminator;
  }

  /**
   * Sets the value of the 'stringTerminator' field.
   * String terminator
   * @param value the value to set.
   */
  public void setStringTerminator(java.lang.String value) {
    this.stringTerminator = value;
  }

  /**
   * Gets the value of the 'littleEndian' field.
   * @return Little endian flag
   */
  public java.lang.Integer getLittleEndian() {
    return littleEndian;
  }

  /**
   * Sets the value of the 'littleEndian' field.
   * Little endian flag
   * @param value the value to set.
   */
  public void setLittleEndian(java.lang.Integer value) {
    this.littleEndian = value;
  }

  /**
   * Gets the value of the 'functionName' field.
   * @return Function name for converting the argument
   */
  public java.lang.String getFunctionName() {
    return functionName;
  }

  /**
   * Sets the value of the 'functionName' field.
   * Function name for converting the argument
   * @param value the value to set.
   */
  public void setFunctionName(java.lang.String value) {
    this.functionName = value;
  }

  /**
   * Gets the value of the 'defaultValue' field.
   * @return Argument deafult value
   */
  public java.lang.String getDefaultValue() {
    return defaultValue;
  }

  /**
   * Sets the value of the 'defaultValue' field.
   * Argument deafult value
   * @param value the value to set.
   */
  public void setDefaultValue(java.lang.String value) {
    this.defaultValue = value;
  }

  /**
   * Gets the value of the 'rangeLow' field.
   * @return Argument range low value
   */
  public java.lang.String getRangeLow() {
    return rangeLow;
  }

  /**
   * Sets the value of the 'rangeLow' field.
   * Argument range low value
   * @param value the value to set.
   */
  public void setRangeLow(java.lang.String value) {
    this.rangeLow = value;
  }

  /**
   * Gets the value of the 'rangeHigh' field.
   * @return Argument range high value
   */
  public java.lang.String getRangeHigh() {
    return rangeHigh;
  }

  /**
   * Sets the value of the 'rangeHigh' field.
   * Argument range high value
   * @param value the value to set.
   */
  public void setRangeHigh(java.lang.String value) {
    this.rangeHigh = value;
  }

  /**
   * Creates a new TC_Argument RecordBuilder.
   * @return A new TC_Argument RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder();
  }

  /**
   * Creates a new TC_Argument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TC_Argument RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder(other);
  }

  /**
   * Creates a new TC_Argument RecordBuilder by copying an existing TC_Argument instance.
   * @param other The existing instance to copy.
   * @return A new TC_Argument RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.TC_Argument other) {
    return new com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder(other);
  }

  /**
   * RecordBuilder for TC_Argument instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TC_Argument>
    implements org.apache.avro.data.RecordBuilder<TC_Argument> {

    /** Argument name */
    private java.lang.String name;
    /** Description of the argument */
    private java.lang.String description;
    /** TC name */
    private java.lang.String tcName;
    /** Relative position within the TC frame */
    private int relativePosition;
    /** Length in bits of the argument */
    private int lengthBits;
    /** Argument type. Raw type */
    private int argType;
    /** Argument sub type */
    private int argSubType;
    /** Argument engineering type */
    private int engType;
    /** Argument units */
    private java.lang.String units;
    /** Prepend size of a string */
    private int prependSize;
    /** String terminator */
    private java.lang.String stringTerminator;
    /** Little endian flag */
    private int littleEndian;
    /** Function name for converting the argument */
    private java.lang.String functionName;
    /** Argument deafult value */
    private java.lang.String defaultValue;
    /** Argument range low value */
    private java.lang.String rangeLow;
    /** Argument range high value */
    private java.lang.String rangeHigh;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tcName)) {
        this.tcName = data().deepCopy(fields()[2].schema(), other.tcName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relativePosition)) {
        this.relativePosition = data().deepCopy(fields()[3].schema(), other.relativePosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lengthBits)) {
        this.lengthBits = data().deepCopy(fields()[4].schema(), other.lengthBits);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.argType)) {
        this.argType = data().deepCopy(fields()[5].schema(), other.argType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.argSubType)) {
        this.argSubType = data().deepCopy(fields()[6].schema(), other.argSubType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.engType)) {
        this.engType = data().deepCopy(fields()[7].schema(), other.engType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.units)) {
        this.units = data().deepCopy(fields()[8].schema(), other.units);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.prependSize)) {
        this.prependSize = data().deepCopy(fields()[9].schema(), other.prependSize);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stringTerminator)) {
        this.stringTerminator = data().deepCopy(fields()[10].schema(), other.stringTerminator);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.littleEndian)) {
        this.littleEndian = data().deepCopy(fields()[11].schema(), other.littleEndian);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.functionName)) {
        this.functionName = data().deepCopy(fields()[12].schema(), other.functionName);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[13].schema(), other.defaultValue);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.rangeLow)) {
        this.rangeLow = data().deepCopy(fields()[14].schema(), other.rangeLow);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.rangeHigh)) {
        this.rangeHigh = data().deepCopy(fields()[15].schema(), other.rangeHigh);
        fieldSetFlags()[15] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TC_Argument instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.TC_Argument other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tcName)) {
        this.tcName = data().deepCopy(fields()[2].schema(), other.tcName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.relativePosition)) {
        this.relativePosition = data().deepCopy(fields()[3].schema(), other.relativePosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lengthBits)) {
        this.lengthBits = data().deepCopy(fields()[4].schema(), other.lengthBits);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.argType)) {
        this.argType = data().deepCopy(fields()[5].schema(), other.argType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.argSubType)) {
        this.argSubType = data().deepCopy(fields()[6].schema(), other.argSubType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.engType)) {
        this.engType = data().deepCopy(fields()[7].schema(), other.engType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.units)) {
        this.units = data().deepCopy(fields()[8].schema(), other.units);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.prependSize)) {
        this.prependSize = data().deepCopy(fields()[9].schema(), other.prependSize);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stringTerminator)) {
        this.stringTerminator = data().deepCopy(fields()[10].schema(), other.stringTerminator);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.littleEndian)) {
        this.littleEndian = data().deepCopy(fields()[11].schema(), other.littleEndian);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.functionName)) {
        this.functionName = data().deepCopy(fields()[12].schema(), other.functionName);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.defaultValue)) {
        this.defaultValue = data().deepCopy(fields()[13].schema(), other.defaultValue);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.rangeLow)) {
        this.rangeLow = data().deepCopy(fields()[14].schema(), other.rangeLow);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.rangeHigh)) {
        this.rangeHigh = data().deepCopy(fields()[15].schema(), other.rangeHigh);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Argument name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Argument name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Argument name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Argument name
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the argument
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the argument
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the argument
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the argument
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tcName' field.
      * TC name
      * @return The value.
      */
    public java.lang.String getTcName() {
      return tcName;
    }

    /**
      * Sets the value of the 'tcName' field.
      * TC name
      * @param value The value of 'tcName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setTcName(java.lang.String value) {
      validate(fields()[2], value);
      this.tcName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tcName' field has been set.
      * TC name
      * @return True if the 'tcName' field has been set, false otherwise.
      */
    public boolean hasTcName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tcName' field.
      * TC name
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearTcName() {
      tcName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'relativePosition' field.
      * Relative position within the TC frame
      * @return The value.
      */
    public java.lang.Integer getRelativePosition() {
      return relativePosition;
    }

    /**
      * Sets the value of the 'relativePosition' field.
      * Relative position within the TC frame
      * @param value The value of 'relativePosition'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setRelativePosition(int value) {
      validate(fields()[3], value);
      this.relativePosition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'relativePosition' field has been set.
      * Relative position within the TC frame
      * @return True if the 'relativePosition' field has been set, false otherwise.
      */
    public boolean hasRelativePosition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'relativePosition' field.
      * Relative position within the TC frame
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearRelativePosition() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lengthBits' field.
      * Length in bits of the argument
      * @return The value.
      */
    public java.lang.Integer getLengthBits() {
      return lengthBits;
    }

    /**
      * Sets the value of the 'lengthBits' field.
      * Length in bits of the argument
      * @param value The value of 'lengthBits'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setLengthBits(int value) {
      validate(fields()[4], value);
      this.lengthBits = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lengthBits' field has been set.
      * Length in bits of the argument
      * @return True if the 'lengthBits' field has been set, false otherwise.
      */
    public boolean hasLengthBits() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lengthBits' field.
      * Length in bits of the argument
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearLengthBits() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'argType' field.
      * Argument type. Raw type
      * @return The value.
      */
    public java.lang.Integer getArgType() {
      return argType;
    }

    /**
      * Sets the value of the 'argType' field.
      * Argument type. Raw type
      * @param value The value of 'argType'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setArgType(int value) {
      validate(fields()[5], value);
      this.argType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'argType' field has been set.
      * Argument type. Raw type
      * @return True if the 'argType' field has been set, false otherwise.
      */
    public boolean hasArgType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'argType' field.
      * Argument type. Raw type
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearArgType() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'argSubType' field.
      * Argument sub type
      * @return The value.
      */
    public java.lang.Integer getArgSubType() {
      return argSubType;
    }

    /**
      * Sets the value of the 'argSubType' field.
      * Argument sub type
      * @param value The value of 'argSubType'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setArgSubType(int value) {
      validate(fields()[6], value);
      this.argSubType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'argSubType' field has been set.
      * Argument sub type
      * @return True if the 'argSubType' field has been set, false otherwise.
      */
    public boolean hasArgSubType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'argSubType' field.
      * Argument sub type
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearArgSubType() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'engType' field.
      * Argument engineering type
      * @return The value.
      */
    public java.lang.Integer getEngType() {
      return engType;
    }

    /**
      * Sets the value of the 'engType' field.
      * Argument engineering type
      * @param value The value of 'engType'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setEngType(int value) {
      validate(fields()[7], value);
      this.engType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'engType' field has been set.
      * Argument engineering type
      * @return True if the 'engType' field has been set, false otherwise.
      */
    public boolean hasEngType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'engType' field.
      * Argument engineering type
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearEngType() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'units' field.
      * Argument units
      * @return The value.
      */
    public java.lang.String getUnits() {
      return units;
    }

    /**
      * Sets the value of the 'units' field.
      * Argument units
      * @param value The value of 'units'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setUnits(java.lang.String value) {
      validate(fields()[8], value);
      this.units = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'units' field has been set.
      * Argument units
      * @return True if the 'units' field has been set, false otherwise.
      */
    public boolean hasUnits() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'units' field.
      * Argument units
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearUnits() {
      units = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'prependSize' field.
      * Prepend size of a string
      * @return The value.
      */
    public java.lang.Integer getPrependSize() {
      return prependSize;
    }

    /**
      * Sets the value of the 'prependSize' field.
      * Prepend size of a string
      * @param value The value of 'prependSize'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setPrependSize(int value) {
      validate(fields()[9], value);
      this.prependSize = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'prependSize' field has been set.
      * Prepend size of a string
      * @return True if the 'prependSize' field has been set, false otherwise.
      */
    public boolean hasPrependSize() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'prependSize' field.
      * Prepend size of a string
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearPrependSize() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'stringTerminator' field.
      * String terminator
      * @return The value.
      */
    public java.lang.String getStringTerminator() {
      return stringTerminator;
    }

    /**
      * Sets the value of the 'stringTerminator' field.
      * String terminator
      * @param value The value of 'stringTerminator'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setStringTerminator(java.lang.String value) {
      validate(fields()[10], value);
      this.stringTerminator = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'stringTerminator' field has been set.
      * String terminator
      * @return True if the 'stringTerminator' field has been set, false otherwise.
      */
    public boolean hasStringTerminator() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'stringTerminator' field.
      * String terminator
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearStringTerminator() {
      stringTerminator = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'littleEndian' field.
      * Little endian flag
      * @return The value.
      */
    public java.lang.Integer getLittleEndian() {
      return littleEndian;
    }

    /**
      * Sets the value of the 'littleEndian' field.
      * Little endian flag
      * @param value The value of 'littleEndian'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setLittleEndian(int value) {
      validate(fields()[11], value);
      this.littleEndian = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'littleEndian' field has been set.
      * Little endian flag
      * @return True if the 'littleEndian' field has been set, false otherwise.
      */
    public boolean hasLittleEndian() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'littleEndian' field.
      * Little endian flag
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearLittleEndian() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'functionName' field.
      * Function name for converting the argument
      * @return The value.
      */
    public java.lang.String getFunctionName() {
      return functionName;
    }

    /**
      * Sets the value of the 'functionName' field.
      * Function name for converting the argument
      * @param value The value of 'functionName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setFunctionName(java.lang.String value) {
      validate(fields()[12], value);
      this.functionName = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'functionName' field has been set.
      * Function name for converting the argument
      * @return True if the 'functionName' field has been set, false otherwise.
      */
    public boolean hasFunctionName() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'functionName' field.
      * Function name for converting the argument
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearFunctionName() {
      functionName = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'defaultValue' field.
      * Argument deafult value
      * @return The value.
      */
    public java.lang.String getDefaultValue() {
      return defaultValue;
    }

    /**
      * Sets the value of the 'defaultValue' field.
      * Argument deafult value
      * @param value The value of 'defaultValue'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setDefaultValue(java.lang.String value) {
      validate(fields()[13], value);
      this.defaultValue = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'defaultValue' field has been set.
      * Argument deafult value
      * @return True if the 'defaultValue' field has been set, false otherwise.
      */
    public boolean hasDefaultValue() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'defaultValue' field.
      * Argument deafult value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearDefaultValue() {
      defaultValue = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'rangeLow' field.
      * Argument range low value
      * @return The value.
      */
    public java.lang.String getRangeLow() {
      return rangeLow;
    }

    /**
      * Sets the value of the 'rangeLow' field.
      * Argument range low value
      * @param value The value of 'rangeLow'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setRangeLow(java.lang.String value) {
      validate(fields()[14], value);
      this.rangeLow = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'rangeLow' field has been set.
      * Argument range low value
      * @return True if the 'rangeLow' field has been set, false otherwise.
      */
    public boolean hasRangeLow() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'rangeLow' field.
      * Argument range low value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearRangeLow() {
      rangeLow = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'rangeHigh' field.
      * Argument range high value
      * @return The value.
      */
    public java.lang.String getRangeHigh() {
      return rangeHigh;
    }

    /**
      * Sets the value of the 'rangeHigh' field.
      * Argument range high value
      * @param value The value of 'rangeHigh'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder setRangeHigh(java.lang.String value) {
      validate(fields()[15], value);
      this.rangeHigh = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'rangeHigh' field has been set.
      * Argument range high value
      * @return True if the 'rangeHigh' field has been set, false otherwise.
      */
    public boolean hasRangeHigh() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'rangeHigh' field.
      * Argument range high value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.TC_Argument.Builder clearRangeHigh() {
      rangeHigh = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public TC_Argument build() {
      try {
        TC_Argument record = new TC_Argument();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.String) defaultValue(fields()[1]);
        record.tcName = fieldSetFlags()[2] ? this.tcName : (java.lang.String) defaultValue(fields()[2]);
        record.relativePosition = fieldSetFlags()[3] ? this.relativePosition : (java.lang.Integer) defaultValue(fields()[3]);
        record.lengthBits = fieldSetFlags()[4] ? this.lengthBits : (java.lang.Integer) defaultValue(fields()[4]);
        record.argType = fieldSetFlags()[5] ? this.argType : (java.lang.Integer) defaultValue(fields()[5]);
        record.argSubType = fieldSetFlags()[6] ? this.argSubType : (java.lang.Integer) defaultValue(fields()[6]);
        record.engType = fieldSetFlags()[7] ? this.engType : (java.lang.Integer) defaultValue(fields()[7]);
        record.units = fieldSetFlags()[8] ? this.units : (java.lang.String) defaultValue(fields()[8]);
        record.prependSize = fieldSetFlags()[9] ? this.prependSize : (java.lang.Integer) defaultValue(fields()[9]);
        record.stringTerminator = fieldSetFlags()[10] ? this.stringTerminator : (java.lang.String) defaultValue(fields()[10]);
        record.littleEndian = fieldSetFlags()[11] ? this.littleEndian : (java.lang.Integer) defaultValue(fields()[11]);
        record.functionName = fieldSetFlags()[12] ? this.functionName : (java.lang.String) defaultValue(fields()[12]);
        record.defaultValue = fieldSetFlags()[13] ? this.defaultValue : (java.lang.String) defaultValue(fields()[13]);
        record.rangeLow = fieldSetFlags()[14] ? this.rangeLow : (java.lang.String) defaultValue(fields()[14]);
        record.rangeHigh = fieldSetFlags()[15] ? this.rangeHigh : (java.lang.String) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
