/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This record contains the list of passes of a S/C over a ground station a during a period of time */
@org.apache.avro.specific.AvroGenerated
public class ListPasses extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6036281064530043210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ListPasses\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This record contains the list of passes of a S/C over a ground station a during a period of time\",\"fields\":[{\"name\":\"spacecraftIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier of the spacecraft\"},{\"name\":\"groundStationIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier of the ground station\"},{\"name\":\"numberPasses\",\"type\":\"int\",\"doc\":\"Number of passes in the list\"},{\"name\":\"listPasses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Pass\",\"doc\":\"A pass over a ground station\",\"fields\":[{\"name\":\"identifier\",\"type\":\"int\",\"doc\":\"Unique identifier of the pass\"},{\"name\":\"AOS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"AOS time. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"LOS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"LOS time. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"duration\",\"type\":\"int\",\"doc\":\"Duration of the pass in seconds\"},{\"name\":\"maxElevation\",\"type\":\"float\",\"doc\":\"Maximum elevation, in decimal degrees\"}]}},\"doc\":\"List of satellite identifiers that belong to the mission\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique identifier of the spacecraft */
  @Deprecated public java.lang.String spacecraftIdentifier;
  /** Unique identifier of the ground station */
  @Deprecated public java.lang.String groundStationIdentifier;
  /** Number of passes in the list */
  @Deprecated public int numberPasses;
  /** List of satellite identifiers that belong to the mission */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> listPasses;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ListPasses() {}

  /**
   * All-args constructor.
   * @param spacecraftIdentifier Unique identifier of the spacecraft
   * @param groundStationIdentifier Unique identifier of the ground station
   * @param numberPasses Number of passes in the list
   * @param listPasses List of satellite identifiers that belong to the mission
   */
  public ListPasses(java.lang.String spacecraftIdentifier, java.lang.String groundStationIdentifier, java.lang.Integer numberPasses, java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> listPasses) {
    this.spacecraftIdentifier = spacecraftIdentifier;
    this.groundStationIdentifier = groundStationIdentifier;
    this.numberPasses = numberPasses;
    this.listPasses = listPasses;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return spacecraftIdentifier;
    case 1: return groundStationIdentifier;
    case 2: return numberPasses;
    case 3: return listPasses;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: spacecraftIdentifier = (java.lang.String)value$; break;
    case 1: groundStationIdentifier = (java.lang.String)value$; break;
    case 2: numberPasses = (java.lang.Integer)value$; break;
    case 3: listPasses = (java.util.List<com.incomplete.cubegs.common.avro.messages.Pass>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'spacecraftIdentifier' field.
   * @return Unique identifier of the spacecraft
   */
  public java.lang.String getSpacecraftIdentifier() {
    return spacecraftIdentifier;
  }

  /**
   * Sets the value of the 'spacecraftIdentifier' field.
   * Unique identifier of the spacecraft
   * @param value the value to set.
   */
  public void setSpacecraftIdentifier(java.lang.String value) {
    this.spacecraftIdentifier = value;
  }

  /**
   * Gets the value of the 'groundStationIdentifier' field.
   * @return Unique identifier of the ground station
   */
  public java.lang.String getGroundStationIdentifier() {
    return groundStationIdentifier;
  }

  /**
   * Sets the value of the 'groundStationIdentifier' field.
   * Unique identifier of the ground station
   * @param value the value to set.
   */
  public void setGroundStationIdentifier(java.lang.String value) {
    this.groundStationIdentifier = value;
  }

  /**
   * Gets the value of the 'numberPasses' field.
   * @return Number of passes in the list
   */
  public java.lang.Integer getNumberPasses() {
    return numberPasses;
  }

  /**
   * Sets the value of the 'numberPasses' field.
   * Number of passes in the list
   * @param value the value to set.
   */
  public void setNumberPasses(java.lang.Integer value) {
    this.numberPasses = value;
  }

  /**
   * Gets the value of the 'listPasses' field.
   * @return List of satellite identifiers that belong to the mission
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> getListPasses() {
    return listPasses;
  }

  /**
   * Sets the value of the 'listPasses' field.
   * List of satellite identifiers that belong to the mission
   * @param value the value to set.
   */
  public void setListPasses(java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> value) {
    this.listPasses = value;
  }

  /**
   * Creates a new ListPasses RecordBuilder.
   * @return A new ListPasses RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListPasses.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.ListPasses.Builder();
  }

  /**
   * Creates a new ListPasses RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ListPasses RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListPasses.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListPasses.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.ListPasses.Builder(other);
  }

  /**
   * Creates a new ListPasses RecordBuilder by copying an existing ListPasses instance.
   * @param other The existing instance to copy.
   * @return A new ListPasses RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListPasses.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListPasses other) {
    return new com.incomplete.cubegs.common.avro.messages.ListPasses.Builder(other);
  }

  /**
   * RecordBuilder for ListPasses instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ListPasses>
    implements org.apache.avro.data.RecordBuilder<ListPasses> {

    /** Unique identifier of the spacecraft */
    private java.lang.String spacecraftIdentifier;
    /** Unique identifier of the ground station */
    private java.lang.String groundStationIdentifier;
    /** Number of passes in the list */
    private int numberPasses;
    /** List of satellite identifiers that belong to the mission */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> listPasses;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListPasses.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.spacecraftIdentifier)) {
        this.spacecraftIdentifier = data().deepCopy(fields()[0].schema(), other.spacecraftIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groundStationIdentifier)) {
        this.groundStationIdentifier = data().deepCopy(fields()[1].schema(), other.groundStationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberPasses)) {
        this.numberPasses = data().deepCopy(fields()[2].schema(), other.numberPasses);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.listPasses)) {
        this.listPasses = data().deepCopy(fields()[3].schema(), other.listPasses);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ListPasses instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListPasses other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.spacecraftIdentifier)) {
        this.spacecraftIdentifier = data().deepCopy(fields()[0].schema(), other.spacecraftIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groundStationIdentifier)) {
        this.groundStationIdentifier = data().deepCopy(fields()[1].schema(), other.groundStationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberPasses)) {
        this.numberPasses = data().deepCopy(fields()[2].schema(), other.numberPasses);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.listPasses)) {
        this.listPasses = data().deepCopy(fields()[3].schema(), other.listPasses);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'spacecraftIdentifier' field.
      * Unique identifier of the spacecraft
      * @return The value.
      */
    public java.lang.String getSpacecraftIdentifier() {
      return spacecraftIdentifier;
    }

    /**
      * Sets the value of the 'spacecraftIdentifier' field.
      * Unique identifier of the spacecraft
      * @param value The value of 'spacecraftIdentifier'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder setSpacecraftIdentifier(java.lang.String value) {
      validate(fields()[0], value);
      this.spacecraftIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'spacecraftIdentifier' field has been set.
      * Unique identifier of the spacecraft
      * @return True if the 'spacecraftIdentifier' field has been set, false otherwise.
      */
    public boolean hasSpacecraftIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'spacecraftIdentifier' field.
      * Unique identifier of the spacecraft
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder clearSpacecraftIdentifier() {
      spacecraftIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'groundStationIdentifier' field.
      * Unique identifier of the ground station
      * @return The value.
      */
    public java.lang.String getGroundStationIdentifier() {
      return groundStationIdentifier;
    }

    /**
      * Sets the value of the 'groundStationIdentifier' field.
      * Unique identifier of the ground station
      * @param value The value of 'groundStationIdentifier'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder setGroundStationIdentifier(java.lang.String value) {
      validate(fields()[1], value);
      this.groundStationIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'groundStationIdentifier' field has been set.
      * Unique identifier of the ground station
      * @return True if the 'groundStationIdentifier' field has been set, false otherwise.
      */
    public boolean hasGroundStationIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'groundStationIdentifier' field.
      * Unique identifier of the ground station
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder clearGroundStationIdentifier() {
      groundStationIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberPasses' field.
      * Number of passes in the list
      * @return The value.
      */
    public java.lang.Integer getNumberPasses() {
      return numberPasses;
    }

    /**
      * Sets the value of the 'numberPasses' field.
      * Number of passes in the list
      * @param value The value of 'numberPasses'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder setNumberPasses(int value) {
      validate(fields()[2], value);
      this.numberPasses = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberPasses' field has been set.
      * Number of passes in the list
      * @return True if the 'numberPasses' field has been set, false otherwise.
      */
    public boolean hasNumberPasses() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberPasses' field.
      * Number of passes in the list
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder clearNumberPasses() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'listPasses' field.
      * List of satellite identifiers that belong to the mission
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> getListPasses() {
      return listPasses;
    }

    /**
      * Sets the value of the 'listPasses' field.
      * List of satellite identifiers that belong to the mission
      * @param value The value of 'listPasses'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder setListPasses(java.util.List<com.incomplete.cubegs.common.avro.messages.Pass> value) {
      validate(fields()[3], value);
      this.listPasses = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'listPasses' field has been set.
      * List of satellite identifiers that belong to the mission
      * @return True if the 'listPasses' field has been set, false otherwise.
      */
    public boolean hasListPasses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'listPasses' field.
      * List of satellite identifiers that belong to the mission
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListPasses.Builder clearListPasses() {
      listPasses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ListPasses build() {
      try {
        ListPasses record = new ListPasses();
        record.spacecraftIdentifier = fieldSetFlags()[0] ? this.spacecraftIdentifier : (java.lang.String) defaultValue(fields()[0]);
        record.groundStationIdentifier = fieldSetFlags()[1] ? this.groundStationIdentifier : (java.lang.String) defaultValue(fields()[1]);
        record.numberPasses = fieldSetFlags()[2] ? this.numberPasses : (java.lang.Integer) defaultValue(fields()[2]);
        record.listPasses = fieldSetFlags()[3] ? this.listPasses : (java.util.List<com.incomplete.cubegs.common.avro.messages.Pass>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
