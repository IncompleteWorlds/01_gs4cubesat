/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This record contains the Satellite parameters */
@org.apache.avro.specific.AvroGenerated
public class Satellite extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5271632180930832086L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Satellite\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This record contains the Satellite parameters\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the satellite\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the mission\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the satellite\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Short code of the satellite\"},{\"name\":\"launchDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Launch date. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"listSubsystems\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Subsystem\",\"doc\":\"This record contains the definition of a subsystem\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Subsystem name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the Subsystem\"},{\"name\":\"satelliteName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Satellite name\"}]}}],\"doc\":\"List of subsystems of the satellite\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Name of the satellite */
  @Deprecated public java.lang.String name;
  /** Name of the mission */
  @Deprecated public java.lang.String missionName;
  /** Description of the satellite */
  @Deprecated public java.lang.String description;
  /** Short code of the satellite */
  @Deprecated public java.lang.String code;
  /** Launch date. Format: YYYY-MM-DDTHH:mm:SS */
  @Deprecated public java.lang.String launchDate;
  /** List of subsystems of the satellite */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> listSubsystems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Satellite() {}

  /**
   * All-args constructor.
   * @param name Name of the satellite
   * @param missionName Name of the mission
   * @param description Description of the satellite
   * @param code Short code of the satellite
   * @param launchDate Launch date. Format: YYYY-MM-DDTHH:mm:SS
   * @param listSubsystems List of subsystems of the satellite
   */
  public Satellite(java.lang.String name, java.lang.String missionName, java.lang.String description, java.lang.String code, java.lang.String launchDate, java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> listSubsystems) {
    this.name = name;
    this.missionName = missionName;
    this.description = description;
    this.code = code;
    this.launchDate = launchDate;
    this.listSubsystems = listSubsystems;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return missionName;
    case 2: return description;
    case 3: return code;
    case 4: return launchDate;
    case 5: return listSubsystems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: missionName = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: code = (java.lang.String)value$; break;
    case 4: launchDate = (java.lang.String)value$; break;
    case 5: listSubsystems = (java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the satellite
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of the satellite
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'missionName' field.
   * @return Name of the mission
   */
  public java.lang.String getMissionName() {
    return missionName;
  }

  /**
   * Sets the value of the 'missionName' field.
   * Name of the mission
   * @param value the value to set.
   */
  public void setMissionName(java.lang.String value) {
    this.missionName = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the satellite
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the satellite
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Short code of the satellite
   */
  public java.lang.String getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * Short code of the satellite
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'launchDate' field.
   * @return Launch date. Format: YYYY-MM-DDTHH:mm:SS
   */
  public java.lang.String getLaunchDate() {
    return launchDate;
  }

  /**
   * Sets the value of the 'launchDate' field.
   * Launch date. Format: YYYY-MM-DDTHH:mm:SS
   * @param value the value to set.
   */
  public void setLaunchDate(java.lang.String value) {
    this.launchDate = value;
  }

  /**
   * Gets the value of the 'listSubsystems' field.
   * @return List of subsystems of the satellite
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> getListSubsystems() {
    return listSubsystems;
  }

  /**
   * Sets the value of the 'listSubsystems' field.
   * List of subsystems of the satellite
   * @param value the value to set.
   */
  public void setListSubsystems(java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> value) {
    this.listSubsystems = value;
  }

  /**
   * Creates a new Satellite RecordBuilder.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Satellite.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.Satellite.Builder();
  }

  /**
   * Creates a new Satellite RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Satellite.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Satellite.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.Satellite.Builder(other);
  }

  /**
   * Creates a new Satellite RecordBuilder by copying an existing Satellite instance.
   * @param other The existing instance to copy.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Satellite.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Satellite other) {
    return new com.incomplete.cubegs.common.avro.messages.Satellite.Builder(other);
  }

  /**
   * RecordBuilder for Satellite instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Satellite>
    implements org.apache.avro.data.RecordBuilder<Satellite> {

    /** Name of the satellite */
    private java.lang.String name;
    /** Name of the mission */
    private java.lang.String missionName;
    /** Description of the satellite */
    private java.lang.String description;
    /** Short code of the satellite */
    private java.lang.String code;
    /** Launch date. Format: YYYY-MM-DDTHH:mm:SS */
    private java.lang.String launchDate;
    /** List of subsystems of the satellite */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> listSubsystems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Satellite.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.missionName)) {
        this.missionName = data().deepCopy(fields()[1].schema(), other.missionName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.launchDate)) {
        this.launchDate = data().deepCopy(fields()[4].schema(), other.launchDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.listSubsystems)) {
        this.listSubsystems = data().deepCopy(fields()[5].schema(), other.listSubsystems);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Satellite instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Satellite other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.missionName)) {
        this.missionName = data().deepCopy(fields()[1].schema(), other.missionName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.launchDate)) {
        this.launchDate = data().deepCopy(fields()[4].schema(), other.launchDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.listSubsystems)) {
        this.listSubsystems = data().deepCopy(fields()[5].schema(), other.listSubsystems);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the satellite
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of the satellite
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the satellite
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'missionName' field.
      * Name of the mission
      * @return The value.
      */
    public java.lang.String getMissionName() {
      return missionName;
    }

    /**
      * Sets the value of the 'missionName' field.
      * Name of the mission
      * @param value The value of 'missionName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setMissionName(java.lang.String value) {
      validate(fields()[1], value);
      this.missionName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'missionName' field has been set.
      * Name of the mission
      * @return True if the 'missionName' field has been set, false otherwise.
      */
    public boolean hasMissionName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'missionName' field.
      * Name of the mission
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearMissionName() {
      missionName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the satellite
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the satellite
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the satellite
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Short code of the satellite
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Short code of the satellite
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setCode(java.lang.String value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Short code of the satellite
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * Short code of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return The value.
      */
    public java.lang.String getLaunchDate() {
      return launchDate;
    }

    /**
      * Sets the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @param value The value of 'launchDate'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setLaunchDate(java.lang.String value) {
      validate(fields()[4], value);
      this.launchDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'launchDate' field has been set.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return True if the 'launchDate' field has been set, false otherwise.
      */
    public boolean hasLaunchDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearLaunchDate() {
      launchDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> getListSubsystems() {
      return listSubsystems;
    }

    /**
      * Sets the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @param value The value of 'listSubsystems'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder setListSubsystems(java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem> value) {
      validate(fields()[5], value);
      this.listSubsystems = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'listSubsystems' field has been set.
      * List of subsystems of the satellite
      * @return True if the 'listSubsystems' field has been set, false otherwise.
      */
    public boolean hasListSubsystems() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Satellite.Builder clearListSubsystems() {
      listSubsystems = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Satellite build() {
      try {
        Satellite record = new Satellite();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.missionName = fieldSetFlags()[1] ? this.missionName : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (java.lang.String) defaultValue(fields()[3]);
        record.launchDate = fieldSetFlags()[4] ? this.launchDate : (java.lang.String) defaultValue(fields()[4]);
        record.listSubsystems = fieldSetFlags()[5] ? this.listSubsystems : (java.util.List<com.incomplete.cubegs.common.avro.messages.Subsystem>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
