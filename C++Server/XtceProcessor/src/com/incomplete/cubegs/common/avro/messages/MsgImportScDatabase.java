/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This message serves for importing a S/C database contained in an Excel spreadsheet, CSV file or XTCE XML file. It returns zero is successful or an error code otherwise. File will be transmitted in chunks of 8 Kb each */
@org.apache.avro.specific.AvroGenerated
public class MsgImportScDatabase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3767219187474029885L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgImportScDatabase\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This message serves for importing a S/C database contained in an Excel spreadsheet, CSV file or XTCE XML file. It returns zero is successful or an error code otherwise. File will be transmitted in chunks of 8 Kb each\",\"fields\":[{\"name\":\"authorizationToken\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Authorization token\"},{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Only the filename\"},{\"name\":\"fileType\",\"type\":\"int\",\"doc\":\"0 - Excel, 1 - CSV, 2 - XTCE XML\"},{\"name\":\"fileSize\",\"type\":\"int\",\"doc\":\"Size of file in bytes\"},{\"name\":\"numberOfChunks\",\"type\":\"int\",\"doc\":\"Number of chunks of 8 Kb\"},{\"name\":\"chunkNumber\",\"type\":\"int\",\"doc\":\"Index of the chunk; 0 .. numberOfChunks - 1\"},{\"name\":\"buffer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Chunk data. 8 Kb\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Authorization token */
  @Deprecated public java.lang.String authorizationToken;
  /** Only the filename */
  @Deprecated public java.lang.String fileName;
  /** 0 - Excel, 1 - CSV, 2 - XTCE XML */
  @Deprecated public int fileType;
  /** Size of file in bytes */
  @Deprecated public int fileSize;
  /** Number of chunks of 8 Kb */
  @Deprecated public int numberOfChunks;
  /** Index of the chunk; 0 .. numberOfChunks - 1 */
  @Deprecated public int chunkNumber;
  /** Chunk data. 8 Kb */
  @Deprecated public java.lang.String buffer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgImportScDatabase() {}

  /**
   * All-args constructor.
   * @param authorizationToken Authorization token
   * @param fileName Only the filename
   * @param fileType 0 - Excel, 1 - CSV, 2 - XTCE XML
   * @param fileSize Size of file in bytes
   * @param numberOfChunks Number of chunks of 8 Kb
   * @param chunkNumber Index of the chunk; 0 .. numberOfChunks - 1
   * @param buffer Chunk data. 8 Kb
   */
  public MsgImportScDatabase(java.lang.String authorizationToken, java.lang.String fileName, java.lang.Integer fileType, java.lang.Integer fileSize, java.lang.Integer numberOfChunks, java.lang.Integer chunkNumber, java.lang.String buffer) {
    this.authorizationToken = authorizationToken;
    this.fileName = fileName;
    this.fileType = fileType;
    this.fileSize = fileSize;
    this.numberOfChunks = numberOfChunks;
    this.chunkNumber = chunkNumber;
    this.buffer = buffer;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return authorizationToken;
    case 1: return fileName;
    case 2: return fileType;
    case 3: return fileSize;
    case 4: return numberOfChunks;
    case 5: return chunkNumber;
    case 6: return buffer;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: authorizationToken = (java.lang.String)value$; break;
    case 1: fileName = (java.lang.String)value$; break;
    case 2: fileType = (java.lang.Integer)value$; break;
    case 3: fileSize = (java.lang.Integer)value$; break;
    case 4: numberOfChunks = (java.lang.Integer)value$; break;
    case 5: chunkNumber = (java.lang.Integer)value$; break;
    case 6: buffer = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'authorizationToken' field.
   * @return Authorization token
   */
  public java.lang.String getAuthorizationToken() {
    return authorizationToken;
  }

  /**
   * Sets the value of the 'authorizationToken' field.
   * Authorization token
   * @param value the value to set.
   */
  public void setAuthorizationToken(java.lang.String value) {
    this.authorizationToken = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return Only the filename
   */
  public java.lang.String getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * Only the filename
   * @param value the value to set.
   */
  public void setFileName(java.lang.String value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'fileType' field.
   * @return 0 - Excel, 1 - CSV, 2 - XTCE XML
   */
  public java.lang.Integer getFileType() {
    return fileType;
  }

  /**
   * Sets the value of the 'fileType' field.
   * 0 - Excel, 1 - CSV, 2 - XTCE XML
   * @param value the value to set.
   */
  public void setFileType(java.lang.Integer value) {
    this.fileType = value;
  }

  /**
   * Gets the value of the 'fileSize' field.
   * @return Size of file in bytes
   */
  public java.lang.Integer getFileSize() {
    return fileSize;
  }

  /**
   * Sets the value of the 'fileSize' field.
   * Size of file in bytes
   * @param value the value to set.
   */
  public void setFileSize(java.lang.Integer value) {
    this.fileSize = value;
  }

  /**
   * Gets the value of the 'numberOfChunks' field.
   * @return Number of chunks of 8 Kb
   */
  public java.lang.Integer getNumberOfChunks() {
    return numberOfChunks;
  }

  /**
   * Sets the value of the 'numberOfChunks' field.
   * Number of chunks of 8 Kb
   * @param value the value to set.
   */
  public void setNumberOfChunks(java.lang.Integer value) {
    this.numberOfChunks = value;
  }

  /**
   * Gets the value of the 'chunkNumber' field.
   * @return Index of the chunk; 0 .. numberOfChunks - 1
   */
  public java.lang.Integer getChunkNumber() {
    return chunkNumber;
  }

  /**
   * Sets the value of the 'chunkNumber' field.
   * Index of the chunk; 0 .. numberOfChunks - 1
   * @param value the value to set.
   */
  public void setChunkNumber(java.lang.Integer value) {
    this.chunkNumber = value;
  }

  /**
   * Gets the value of the 'buffer' field.
   * @return Chunk data. 8 Kb
   */
  public java.lang.String getBuffer() {
    return buffer;
  }

  /**
   * Sets the value of the 'buffer' field.
   * Chunk data. 8 Kb
   * @param value the value to set.
   */
  public void setBuffer(java.lang.String value) {
    this.buffer = value;
  }

  /**
   * Creates a new MsgImportScDatabase RecordBuilder.
   * @return A new MsgImportScDatabase RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder();
  }

  /**
   * Creates a new MsgImportScDatabase RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgImportScDatabase RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder(other);
  }

  /**
   * Creates a new MsgImportScDatabase RecordBuilder by copying an existing MsgImportScDatabase instance.
   * @param other The existing instance to copy.
   * @return A new MsgImportScDatabase RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder(other);
  }

  /**
   * RecordBuilder for MsgImportScDatabase instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgImportScDatabase>
    implements org.apache.avro.data.RecordBuilder<MsgImportScDatabase> {

    /** Authorization token */
    private java.lang.String authorizationToken;
    /** Only the filename */
    private java.lang.String fileName;
    /** 0 - Excel, 1 - CSV, 2 - XTCE XML */
    private int fileType;
    /** Size of file in bytes */
    private int fileSize;
    /** Number of chunks of 8 Kb */
    private int numberOfChunks;
    /** Index of the chunk; 0 .. numberOfChunks - 1 */
    private int chunkNumber;
    /** Chunk data. 8 Kb */
    private java.lang.String buffer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fileType)) {
        this.fileType = data().deepCopy(fields()[2].schema(), other.fileType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fileSize)) {
        this.fileSize = data().deepCopy(fields()[3].schema(), other.fileSize);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberOfChunks)) {
        this.numberOfChunks = data().deepCopy(fields()[4].schema(), other.numberOfChunks);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.chunkNumber)) {
        this.chunkNumber = data().deepCopy(fields()[5].schema(), other.chunkNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.buffer)) {
        this.buffer = data().deepCopy(fields()[6].schema(), other.buffer);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MsgImportScDatabase instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fileType)) {
        this.fileType = data().deepCopy(fields()[2].schema(), other.fileType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fileSize)) {
        this.fileSize = data().deepCopy(fields()[3].schema(), other.fileSize);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberOfChunks)) {
        this.numberOfChunks = data().deepCopy(fields()[4].schema(), other.numberOfChunks);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.chunkNumber)) {
        this.chunkNumber = data().deepCopy(fields()[5].schema(), other.chunkNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.buffer)) {
        this.buffer = data().deepCopy(fields()[6].schema(), other.buffer);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'authorizationToken' field.
      * Authorization token
      * @return The value.
      */
    public java.lang.String getAuthorizationToken() {
      return authorizationToken;
    }

    /**
      * Sets the value of the 'authorizationToken' field.
      * Authorization token
      * @param value The value of 'authorizationToken'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setAuthorizationToken(java.lang.String value) {
      validate(fields()[0], value);
      this.authorizationToken = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationToken' field has been set.
      * Authorization token
      * @return True if the 'authorizationToken' field has been set, false otherwise.
      */
    public boolean hasAuthorizationToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'authorizationToken' field.
      * Authorization token
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearAuthorizationToken() {
      authorizationToken = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileName' field.
      * Only the filename
      * @return The value.
      */
    public java.lang.String getFileName() {
      return fileName;
    }

    /**
      * Sets the value of the 'fileName' field.
      * Only the filename
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setFileName(java.lang.String value) {
      validate(fields()[1], value);
      this.fileName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * Only the filename
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileName' field.
      * Only the filename
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileType' field.
      * 0 - Excel, 1 - CSV, 2 - XTCE XML
      * @return The value.
      */
    public java.lang.Integer getFileType() {
      return fileType;
    }

    /**
      * Sets the value of the 'fileType' field.
      * 0 - Excel, 1 - CSV, 2 - XTCE XML
      * @param value The value of 'fileType'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setFileType(int value) {
      validate(fields()[2], value);
      this.fileType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fileType' field has been set.
      * 0 - Excel, 1 - CSV, 2 - XTCE XML
      * @return True if the 'fileType' field has been set, false otherwise.
      */
    public boolean hasFileType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fileType' field.
      * 0 - Excel, 1 - CSV, 2 - XTCE XML
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearFileType() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileSize' field.
      * Size of file in bytes
      * @return The value.
      */
    public java.lang.Integer getFileSize() {
      return fileSize;
    }

    /**
      * Sets the value of the 'fileSize' field.
      * Size of file in bytes
      * @param value The value of 'fileSize'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setFileSize(int value) {
      validate(fields()[3], value);
      this.fileSize = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fileSize' field has been set.
      * Size of file in bytes
      * @return True if the 'fileSize' field has been set, false otherwise.
      */
    public boolean hasFileSize() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fileSize' field.
      * Size of file in bytes
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearFileSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfChunks' field.
      * Number of chunks of 8 Kb
      * @return The value.
      */
    public java.lang.Integer getNumberOfChunks() {
      return numberOfChunks;
    }

    /**
      * Sets the value of the 'numberOfChunks' field.
      * Number of chunks of 8 Kb
      * @param value The value of 'numberOfChunks'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setNumberOfChunks(int value) {
      validate(fields()[4], value);
      this.numberOfChunks = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfChunks' field has been set.
      * Number of chunks of 8 Kb
      * @return True if the 'numberOfChunks' field has been set, false otherwise.
      */
    public boolean hasNumberOfChunks() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'numberOfChunks' field.
      * Number of chunks of 8 Kb
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearNumberOfChunks() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'chunkNumber' field.
      * Index of the chunk; 0 .. numberOfChunks - 1
      * @return The value.
      */
    public java.lang.Integer getChunkNumber() {
      return chunkNumber;
    }

    /**
      * Sets the value of the 'chunkNumber' field.
      * Index of the chunk; 0 .. numberOfChunks - 1
      * @param value The value of 'chunkNumber'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setChunkNumber(int value) {
      validate(fields()[5], value);
      this.chunkNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'chunkNumber' field has been set.
      * Index of the chunk; 0 .. numberOfChunks - 1
      * @return True if the 'chunkNumber' field has been set, false otherwise.
      */
    public boolean hasChunkNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'chunkNumber' field.
      * Index of the chunk; 0 .. numberOfChunks - 1
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearChunkNumber() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'buffer' field.
      * Chunk data. 8 Kb
      * @return The value.
      */
    public java.lang.String getBuffer() {
      return buffer;
    }

    /**
      * Sets the value of the 'buffer' field.
      * Chunk data. 8 Kb
      * @param value The value of 'buffer'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder setBuffer(java.lang.String value) {
      validate(fields()[6], value);
      this.buffer = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'buffer' field has been set.
      * Chunk data. 8 Kb
      * @return True if the 'buffer' field has been set, false otherwise.
      */
    public boolean hasBuffer() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'buffer' field.
      * Chunk data. 8 Kb
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgImportScDatabase.Builder clearBuffer() {
      buffer = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public MsgImportScDatabase build() {
      try {
        MsgImportScDatabase record = new MsgImportScDatabase();
        record.authorizationToken = fieldSetFlags()[0] ? this.authorizationToken : (java.lang.String) defaultValue(fields()[0]);
        record.fileName = fieldSetFlags()[1] ? this.fileName : (java.lang.String) defaultValue(fields()[1]);
        record.fileType = fieldSetFlags()[2] ? this.fileType : (java.lang.Integer) defaultValue(fields()[2]);
        record.fileSize = fieldSetFlags()[3] ? this.fileSize : (java.lang.Integer) defaultValue(fields()[3]);
        record.numberOfChunks = fieldSetFlags()[4] ? this.numberOfChunks : (java.lang.Integer) defaultValue(fields()[4]);
        record.chunkNumber = fieldSetFlags()[5] ? this.chunkNumber : (java.lang.Integer) defaultValue(fields()[5]);
        record.buffer = fieldSetFlags()[6] ? this.buffer : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
