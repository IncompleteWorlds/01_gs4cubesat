/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Calibration Item. It contains an item of a Calibration function */
@org.apache.avro.specific.AvroGenerated
public class CalibrationItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2503853725630814736L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CalibrationItem\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"Calibration Item. It contains an item of a Calibration function\",\"fields\":[{\"name\":\"calibration1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First calibration value\"},{\"name\":\"calibration2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Second calibration value\"},{\"name\":\"calibration2_text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Descriptin of Second calibration value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** First calibration value */
  @Deprecated public java.lang.String calibration1;
  /** Second calibration value */
  @Deprecated public java.lang.String calibration2;
  /** Descriptin of Second calibration value */
  @Deprecated public java.lang.String calibration2_text;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CalibrationItem() {}

  /**
   * All-args constructor.
   * @param calibration1 First calibration value
   * @param calibration2 Second calibration value
   * @param calibration2_text Descriptin of Second calibration value
   */
  public CalibrationItem(java.lang.String calibration1, java.lang.String calibration2, java.lang.String calibration2_text) {
    this.calibration1 = calibration1;
    this.calibration2 = calibration2;
    this.calibration2_text = calibration2_text;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return calibration1;
    case 1: return calibration2;
    case 2: return calibration2_text;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: calibration1 = (java.lang.String)value$; break;
    case 1: calibration2 = (java.lang.String)value$; break;
    case 2: calibration2_text = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'calibration1' field.
   * @return First calibration value
   */
  public java.lang.String getCalibration1() {
    return calibration1;
  }

  /**
   * Sets the value of the 'calibration1' field.
   * First calibration value
   * @param value the value to set.
   */
  public void setCalibration1(java.lang.String value) {
    this.calibration1 = value;
  }

  /**
   * Gets the value of the 'calibration2' field.
   * @return Second calibration value
   */
  public java.lang.String getCalibration2() {
    return calibration2;
  }

  /**
   * Sets the value of the 'calibration2' field.
   * Second calibration value
   * @param value the value to set.
   */
  public void setCalibration2(java.lang.String value) {
    this.calibration2 = value;
  }

  /**
   * Gets the value of the 'calibration2_text' field.
   * @return Descriptin of Second calibration value
   */
  public java.lang.String getCalibration2Text() {
    return calibration2_text;
  }

  /**
   * Sets the value of the 'calibration2_text' field.
   * Descriptin of Second calibration value
   * @param value the value to set.
   */
  public void setCalibration2Text(java.lang.String value) {
    this.calibration2_text = value;
  }

  /**
   * Creates a new CalibrationItem RecordBuilder.
   * @return A new CalibrationItem RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder();
  }

  /**
   * Creates a new CalibrationItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CalibrationItem RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder(other);
  }

  /**
   * Creates a new CalibrationItem RecordBuilder by copying an existing CalibrationItem instance.
   * @param other The existing instance to copy.
   * @return A new CalibrationItem RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.CalibrationItem other) {
    return new com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder(other);
  }

  /**
   * RecordBuilder for CalibrationItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CalibrationItem>
    implements org.apache.avro.data.RecordBuilder<CalibrationItem> {

    /** First calibration value */
    private java.lang.String calibration1;
    /** Second calibration value */
    private java.lang.String calibration2;
    /** Descriptin of Second calibration value */
    private java.lang.String calibration2_text;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.calibration1)) {
        this.calibration1 = data().deepCopy(fields()[0].schema(), other.calibration1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.calibration2)) {
        this.calibration2 = data().deepCopy(fields()[1].schema(), other.calibration2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.calibration2_text)) {
        this.calibration2_text = data().deepCopy(fields()[2].schema(), other.calibration2_text);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CalibrationItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.CalibrationItem other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.calibration1)) {
        this.calibration1 = data().deepCopy(fields()[0].schema(), other.calibration1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.calibration2)) {
        this.calibration2 = data().deepCopy(fields()[1].schema(), other.calibration2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.calibration2_text)) {
        this.calibration2_text = data().deepCopy(fields()[2].schema(), other.calibration2_text);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'calibration1' field.
      * First calibration value
      * @return The value.
      */
    public java.lang.String getCalibration1() {
      return calibration1;
    }

    /**
      * Sets the value of the 'calibration1' field.
      * First calibration value
      * @param value The value of 'calibration1'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder setCalibration1(java.lang.String value) {
      validate(fields()[0], value);
      this.calibration1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'calibration1' field has been set.
      * First calibration value
      * @return True if the 'calibration1' field has been set, false otherwise.
      */
    public boolean hasCalibration1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'calibration1' field.
      * First calibration value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder clearCalibration1() {
      calibration1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'calibration2' field.
      * Second calibration value
      * @return The value.
      */
    public java.lang.String getCalibration2() {
      return calibration2;
    }

    /**
      * Sets the value of the 'calibration2' field.
      * Second calibration value
      * @param value The value of 'calibration2'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder setCalibration2(java.lang.String value) {
      validate(fields()[1], value);
      this.calibration2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'calibration2' field has been set.
      * Second calibration value
      * @return True if the 'calibration2' field has been set, false otherwise.
      */
    public boolean hasCalibration2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'calibration2' field.
      * Second calibration value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder clearCalibration2() {
      calibration2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'calibration2_text' field.
      * Descriptin of Second calibration value
      * @return The value.
      */
    public java.lang.String getCalibration2Text() {
      return calibration2_text;
    }

    /**
      * Sets the value of the 'calibration2_text' field.
      * Descriptin of Second calibration value
      * @param value The value of 'calibration2_text'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder setCalibration2Text(java.lang.String value) {
      validate(fields()[2], value);
      this.calibration2_text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'calibration2_text' field has been set.
      * Descriptin of Second calibration value
      * @return True if the 'calibration2_text' field has been set, false otherwise.
      */
    public boolean hasCalibration2Text() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'calibration2_text' field.
      * Descriptin of Second calibration value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.CalibrationItem.Builder clearCalibration2Text() {
      calibration2_text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CalibrationItem build() {
      try {
        CalibrationItem record = new CalibrationItem();
        record.calibration1 = fieldSetFlags()[0] ? this.calibration1 : (java.lang.String) defaultValue(fields()[0]);
        record.calibration2 = fieldSetFlags()[1] ? this.calibration2 : (java.lang.String) defaultValue(fields()[1]);
        record.calibration2_text = fieldSetFlags()[2] ? this.calibration2_text : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
