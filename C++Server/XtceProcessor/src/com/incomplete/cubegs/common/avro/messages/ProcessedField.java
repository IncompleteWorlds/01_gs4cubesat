/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** It describes a field of frame (TM point) that has been already processed */
@org.apache.avro.specific.AvroGenerated
public class ProcessedField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1277292792679241752L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProcessedField\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"It describes a field of frame (TM point) that has been already processed\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Field index in the frame. Position in the frame\"},{\"name\":\"fieldTypeId\",\"type\":\"int\",\"doc\":\"Field Type identifier\"},{\"name\":\"fieldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Duplicated with respect to Field Type Definition\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Calibrated Value of the field\"},{\"name\":\"rawValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Raw Value of the field\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Field index in the frame. Position in the frame */
  @Deprecated public int index;
  /** Field Type identifier */
  @Deprecated public int fieldTypeId;
  /** Duplicated with respect to Field Type Definition */
  @Deprecated public java.lang.String fieldName;
  /** Calibrated Value of the field */
  @Deprecated public java.lang.String value;
  /** Raw Value of the field */
  @Deprecated public java.lang.String rawValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProcessedField() {}

  /**
   * All-args constructor.
   * @param index Field index in the frame. Position in the frame
   * @param fieldTypeId Field Type identifier
   * @param fieldName Duplicated with respect to Field Type Definition
   * @param value Calibrated Value of the field
   * @param rawValue Raw Value of the field
   */
  public ProcessedField(java.lang.Integer index, java.lang.Integer fieldTypeId, java.lang.String fieldName, java.lang.String value, java.lang.String rawValue) {
    this.index = index;
    this.fieldTypeId = fieldTypeId;
    this.fieldName = fieldName;
    this.value = value;
    this.rawValue = rawValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return index;
    case 1: return fieldTypeId;
    case 2: return fieldName;
    case 3: return value;
    case 4: return rawValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: index = (java.lang.Integer)value$; break;
    case 1: fieldTypeId = (java.lang.Integer)value$; break;
    case 2: fieldName = (java.lang.String)value$; break;
    case 3: value = (java.lang.String)value$; break;
    case 4: rawValue = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'index' field.
   * @return Field index in the frame. Position in the frame
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * Field index in the frame. Position in the frame
   * @param value the value to set.
   */
  public void setIndex(java.lang.Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'fieldTypeId' field.
   * @return Field Type identifier
   */
  public java.lang.Integer getFieldTypeId() {
    return fieldTypeId;
  }

  /**
   * Sets the value of the 'fieldTypeId' field.
   * Field Type identifier
   * @param value the value to set.
   */
  public void setFieldTypeId(java.lang.Integer value) {
    this.fieldTypeId = value;
  }

  /**
   * Gets the value of the 'fieldName' field.
   * @return Duplicated with respect to Field Type Definition
   */
  public java.lang.String getFieldName() {
    return fieldName;
  }

  /**
   * Sets the value of the 'fieldName' field.
   * Duplicated with respect to Field Type Definition
   * @param value the value to set.
   */
  public void setFieldName(java.lang.String value) {
    this.fieldName = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Calibrated Value of the field
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * Calibrated Value of the field
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'rawValue' field.
   * @return Raw Value of the field
   */
  public java.lang.String getRawValue() {
    return rawValue;
  }

  /**
   * Sets the value of the 'rawValue' field.
   * Raw Value of the field
   * @param value the value to set.
   */
  public void setRawValue(java.lang.String value) {
    this.rawValue = value;
  }

  /**
   * Creates a new ProcessedField RecordBuilder.
   * @return A new ProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder();
  }

  /**
   * Creates a new ProcessedField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder(other);
  }

  /**
   * Creates a new ProcessedField RecordBuilder by copying an existing ProcessedField instance.
   * @param other The existing instance to copy.
   * @return A new ProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ProcessedField other) {
    return new com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder(other);
  }

  /**
   * RecordBuilder for ProcessedField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProcessedField>
    implements org.apache.avro.data.RecordBuilder<ProcessedField> {

    /** Field index in the frame. Position in the frame */
    private int index;
    /** Field Type identifier */
    private int fieldTypeId;
    /** Duplicated with respect to Field Type Definition */
    private java.lang.String fieldName;
    /** Calibrated Value of the field */
    private java.lang.String value;
    /** Raw Value of the field */
    private java.lang.String rawValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldTypeId)) {
        this.fieldTypeId = data().deepCopy(fields()[1].schema(), other.fieldTypeId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[2].schema(), other.fieldName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rawValue)) {
        this.rawValue = data().deepCopy(fields()[4].schema(), other.rawValue);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ProcessedField instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ProcessedField other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.index)) {
        this.index = data().deepCopy(fields()[0].schema(), other.index);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldTypeId)) {
        this.fieldTypeId = data().deepCopy(fields()[1].schema(), other.fieldTypeId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldName)) {
        this.fieldName = data().deepCopy(fields()[2].schema(), other.fieldName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rawValue)) {
        this.rawValue = data().deepCopy(fields()[4].schema(), other.rawValue);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'index' field.
      * Field index in the frame. Position in the frame
      * @return The value.
      */
    public java.lang.Integer getIndex() {
      return index;
    }

    /**
      * Sets the value of the 'index' field.
      * Field index in the frame. Position in the frame
      * @param value The value of 'index'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder setIndex(int value) {
      validate(fields()[0], value);
      this.index = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * Field index in the frame. Position in the frame
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'index' field.
      * Field index in the frame. Position in the frame
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder clearIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldTypeId' field.
      * Field Type identifier
      * @return The value.
      */
    public java.lang.Integer getFieldTypeId() {
      return fieldTypeId;
    }

    /**
      * Sets the value of the 'fieldTypeId' field.
      * Field Type identifier
      * @param value The value of 'fieldTypeId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder setFieldTypeId(int value) {
      validate(fields()[1], value);
      this.fieldTypeId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldTypeId' field has been set.
      * Field Type identifier
      * @return True if the 'fieldTypeId' field has been set, false otherwise.
      */
    public boolean hasFieldTypeId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fieldTypeId' field.
      * Field Type identifier
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder clearFieldTypeId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldName' field.
      * Duplicated with respect to Field Type Definition
      * @return The value.
      */
    public java.lang.String getFieldName() {
      return fieldName;
    }

    /**
      * Sets the value of the 'fieldName' field.
      * Duplicated with respect to Field Type Definition
      * @param value The value of 'fieldName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder setFieldName(java.lang.String value) {
      validate(fields()[2], value);
      this.fieldName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldName' field has been set.
      * Duplicated with respect to Field Type Definition
      * @return True if the 'fieldName' field has been set, false otherwise.
      */
    public boolean hasFieldName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fieldName' field.
      * Duplicated with respect to Field Type Definition
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder clearFieldName() {
      fieldName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Calibrated Value of the field
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * Calibrated Value of the field
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder setValue(java.lang.String value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Calibrated Value of the field
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * Calibrated Value of the field
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'rawValue' field.
      * Raw Value of the field
      * @return The value.
      */
    public java.lang.String getRawValue() {
      return rawValue;
    }

    /**
      * Sets the value of the 'rawValue' field.
      * Raw Value of the field
      * @param value The value of 'rawValue'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder setRawValue(java.lang.String value) {
      validate(fields()[4], value);
      this.rawValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'rawValue' field has been set.
      * Raw Value of the field
      * @return True if the 'rawValue' field has been set, false otherwise.
      */
    public boolean hasRawValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'rawValue' field.
      * Raw Value of the field
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ProcessedField.Builder clearRawValue() {
      rawValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ProcessedField build() {
      try {
        ProcessedField record = new ProcessedField();
        record.index = fieldSetFlags()[0] ? this.index : (java.lang.Integer) defaultValue(fields()[0]);
        record.fieldTypeId = fieldSetFlags()[1] ? this.fieldTypeId : (java.lang.Integer) defaultValue(fields()[1]);
        record.fieldName = fieldSetFlags()[2] ? this.fieldName : (java.lang.String) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.lang.String) defaultValue(fields()[3]);
        record.rawValue = fieldSetFlags()[4] ? this.rawValue : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
