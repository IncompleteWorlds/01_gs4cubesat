/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This record contains a list of Frame Types */
@org.apache.avro.specific.AvroGenerated
public class ListFrameTypes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4521200067141677782L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ListFrameTypes\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This record contains a list of Frame Types\",\"fields\":[{\"name\":\"listFrameTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TM_Frame\",\"doc\":\"This record contains the definition of a TM Frame (aka Container), at application level protocol\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of Frame Type\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of Frame Type\"},{\"name\":\"expectedInterval\",\"type\":\"int\",\"doc\":\"Expected interval in milliseconds\"},{\"name\":\"lengthBits\",\"type\":\"int\",\"doc\":\"Length of frame in bits. Padding to the right\"},{\"name\":\"flag\",\"type\":{\"type\":\"enum\",\"name\":\"TmFrameFlagEnum\",\"symbols\":[\"TM_FRAME_ARCHIVE\",\"TM_FRAME_LITTLE_ENDIAN\"]},\"doc\":\"Field value subtypes\"},{\"name\":\"frameConditions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TM_FrameCondition\",\"doc\":\"Definition of a Condition that a TM Frame shall meet\",\"fields\":[{\"name\":\"frameName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the TM Frame this condition belongs to\"},{\"name\":\"parameterName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the parameter\"},{\"name\":\"parameterValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Value the parameter must have\"}]}}],\"doc\":\"List of TM Frame conditions\"},{\"name\":\"tmFields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TM_FrameField\",\"doc\":\"This structure defines a field of a TM Frame\",\"fields\":[{\"name\":\"frameName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the TM Frame this condition belongs to\"},{\"name\":\"parameterName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the parameter\"},{\"name\":\"relativePosition\",\"type\":\"int\",\"doc\":\"Start position of the parameter in the Container, in bits\"},{\"name\":\"sequenceNumber\",\"type\":\"int\",\"doc\":\"Index of the field inside of the sequence that composes the frame\"}]}},\"doc\":\"List of TM Field\"},{\"name\":\"layerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Layer identifier the frame belongs to\"}]}},\"doc\":\"List of Frame Types\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** List of Frame Types */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> listFrameTypes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ListFrameTypes() {}

  /**
   * All-args constructor.
   * @param listFrameTypes List of Frame Types
   */
  public ListFrameTypes(java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> listFrameTypes) {
    this.listFrameTypes = listFrameTypes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return listFrameTypes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: listFrameTypes = (java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'listFrameTypes' field.
   * @return List of Frame Types
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> getListFrameTypes() {
    return listFrameTypes;
  }

  /**
   * Sets the value of the 'listFrameTypes' field.
   * List of Frame Types
   * @param value the value to set.
   */
  public void setListFrameTypes(java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> value) {
    this.listFrameTypes = value;
  }

  /**
   * Creates a new ListFrameTypes RecordBuilder.
   * @return A new ListFrameTypes RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder();
  }

  /**
   * Creates a new ListFrameTypes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ListFrameTypes RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder(other);
  }

  /**
   * Creates a new ListFrameTypes RecordBuilder by copying an existing ListFrameTypes instance.
   * @param other The existing instance to copy.
   * @return A new ListFrameTypes RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListFrameTypes other) {
    return new com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder(other);
  }

  /**
   * RecordBuilder for ListFrameTypes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ListFrameTypes>
    implements org.apache.avro.data.RecordBuilder<ListFrameTypes> {

    /** List of Frame Types */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> listFrameTypes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listFrameTypes)) {
        this.listFrameTypes = data().deepCopy(fields()[0].schema(), other.listFrameTypes);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ListFrameTypes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListFrameTypes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.listFrameTypes)) {
        this.listFrameTypes = data().deepCopy(fields()[0].schema(), other.listFrameTypes);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'listFrameTypes' field.
      * List of Frame Types
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> getListFrameTypes() {
      return listFrameTypes;
    }

    /**
      * Sets the value of the 'listFrameTypes' field.
      * List of Frame Types
      * @param value The value of 'listFrameTypes'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder setListFrameTypes(java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame> value) {
      validate(fields()[0], value);
      this.listFrameTypes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'listFrameTypes' field has been set.
      * List of Frame Types
      * @return True if the 'listFrameTypes' field has been set, false otherwise.
      */
    public boolean hasListFrameTypes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'listFrameTypes' field.
      * List of Frame Types
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListFrameTypes.Builder clearListFrameTypes() {
      listFrameTypes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ListFrameTypes build() {
      try {
        ListFrameTypes record = new ListFrameTypes();
        record.listFrameTypes = fieldSetFlags()[0] ? this.listFrameTypes : (java.util.List<com.incomplete.cubegs.common.avro.messages.TM_Frame>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
