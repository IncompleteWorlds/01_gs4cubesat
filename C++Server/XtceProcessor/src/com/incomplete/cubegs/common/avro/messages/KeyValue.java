/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** A generic pair of key = value */
@org.apache.avro.specific.AvroGenerated
public class KeyValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1225708510619935573L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KeyValue\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"A generic pair of key = value\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Key\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Key */
  @Deprecated public java.lang.String key;
  /** Value */
  @Deprecated public java.lang.String value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KeyValue() {}

  /**
   * All-args constructor.
   * @param key Key
   * @param value Value
   */
  public KeyValue(java.lang.String key, java.lang.String value) {
    this.key = key;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: value = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return Key
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * Key
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Value
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * Value
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Creates a new KeyValue RecordBuilder.
   * @return A new KeyValue RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.KeyValue.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.KeyValue.Builder();
  }

  /**
   * Creates a new KeyValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KeyValue RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.KeyValue.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.KeyValue.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.KeyValue.Builder(other);
  }

  /**
   * Creates a new KeyValue RecordBuilder by copying an existing KeyValue instance.
   * @param other The existing instance to copy.
   * @return A new KeyValue RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.KeyValue.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.KeyValue other) {
    return new com.incomplete.cubegs.common.avro.messages.KeyValue.Builder(other);
  }

  /**
   * RecordBuilder for KeyValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KeyValue>
    implements org.apache.avro.data.RecordBuilder<KeyValue> {

    /** Key */
    private java.lang.String key;
    /** Value */
    private java.lang.String value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.KeyValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KeyValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.KeyValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * Key
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * Key
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.KeyValue.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * Key
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * Key
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.KeyValue.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Value
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * Value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.KeyValue.Builder setValue(java.lang.String value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * Value
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.KeyValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public KeyValue build() {
      try {
        KeyValue record = new KeyValue();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
