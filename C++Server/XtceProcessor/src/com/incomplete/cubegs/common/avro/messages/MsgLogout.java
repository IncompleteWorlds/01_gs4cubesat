/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This message requests a logout of an user  */
@org.apache.avro.specific.AvroGenerated
public class MsgLogout extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4802880044103758830L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgLogout\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This message requests a logout of an user \",\"fields\":[{\"name\":\"authorizationToken\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Authorization token\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique user identifier\"},{\"name\":\"userName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User name\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Authorization token */
  @Deprecated public java.lang.String authorizationToken;
  /** Unique user identifier */
  @Deprecated public java.lang.String userId;
  /** User name */
  @Deprecated public java.lang.String userName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgLogout() {}

  /**
   * All-args constructor.
   * @param authorizationToken Authorization token
   * @param userId Unique user identifier
   * @param userName User name
   */
  public MsgLogout(java.lang.String authorizationToken, java.lang.String userId, java.lang.String userName) {
    this.authorizationToken = authorizationToken;
    this.userId = userId;
    this.userName = userName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return authorizationToken;
    case 1: return userId;
    case 2: return userName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: authorizationToken = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    case 2: userName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'authorizationToken' field.
   * @return Authorization token
   */
  public java.lang.String getAuthorizationToken() {
    return authorizationToken;
  }

  /**
   * Sets the value of the 'authorizationToken' field.
   * Authorization token
   * @param value the value to set.
   */
  public void setAuthorizationToken(java.lang.String value) {
    this.authorizationToken = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return Unique user identifier
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * Unique user identifier
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return User name
   */
  public java.lang.String getUserName() {
    return userName;
  }

  /**
   * Sets the value of the 'userName' field.
   * User name
   * @param value the value to set.
   */
  public void setUserName(java.lang.String value) {
    this.userName = value;
  }

  /**
   * Creates a new MsgLogout RecordBuilder.
   * @return A new MsgLogout RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder();
  }

  /**
   * Creates a new MsgLogout RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgLogout RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder(other);
  }

  /**
   * Creates a new MsgLogout RecordBuilder by copying an existing MsgLogout instance.
   * @param other The existing instance to copy.
   * @return A new MsgLogout RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgLogout other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder(other);
  }

  /**
   * RecordBuilder for MsgLogout instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgLogout>
    implements org.apache.avro.data.RecordBuilder<MsgLogout> {

    /** Authorization token */
    private java.lang.String authorizationToken;
    /** Unique user identifier */
    private java.lang.String userId;
    /** User name */
    private java.lang.String userName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userName)) {
        this.userName = data().deepCopy(fields()[2].schema(), other.userName);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MsgLogout instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgLogout other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userName)) {
        this.userName = data().deepCopy(fields()[2].schema(), other.userName);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'authorizationToken' field.
      * Authorization token
      * @return The value.
      */
    public java.lang.String getAuthorizationToken() {
      return authorizationToken;
    }

    /**
      * Sets the value of the 'authorizationToken' field.
      * Authorization token
      * @param value The value of 'authorizationToken'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder setAuthorizationToken(java.lang.String value) {
      validate(fields()[0], value);
      this.authorizationToken = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationToken' field has been set.
      * Authorization token
      * @return True if the 'authorizationToken' field has been set, false otherwise.
      */
    public boolean hasAuthorizationToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'authorizationToken' field.
      * Authorization token
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder clearAuthorizationToken() {
      authorizationToken = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * Unique user identifier
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * Unique user identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * Unique user identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * Unique user identifier
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * User name
      * @return The value.
      */
    public java.lang.String getUserName() {
      return userName;
    }

    /**
      * Sets the value of the 'userName' field.
      * User name
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder setUserName(java.lang.String value) {
      validate(fields()[2], value);
      this.userName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * User name
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userName' field.
      * User name
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgLogout.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MsgLogout build() {
      try {
        MsgLogout record = new MsgLogout();
        record.authorizationToken = fieldSetFlags()[0] ? this.authorizationToken : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.userName = fieldSetFlags()[2] ? this.userName : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
