/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This message updates the Node data of a Subsystem. */
@org.apache.avro.specific.AvroGenerated
public class MsgUpdateNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -20422142822247453L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgUpdateNode\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This message updates the Node data of a Subsystem.\",\"fields\":[{\"name\":\"authorizationToken\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Authorization token\"},{\"name\":\"subsystemId\",\"type\":\"int\",\"doc\":\"Subsystem identifier Node belongs to\"},{\"name\":\"node\",\"type\":{\"type\":\"record\",\"name\":\"Node\",\"doc\":\"This record contains the definition of a Node\",\"fields\":[{\"name\":\"identifier\",\"type\":\"int\",\"doc\":\"Unique identifier of the Node\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Node name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the Node\"},{\"name\":\"subsystemName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Subsystem name\"}]},\"doc\":\"New Node data\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Authorization token */
  @Deprecated public java.lang.String authorizationToken;
  /** Subsystem identifier Node belongs to */
  @Deprecated public int subsystemId;
  /** New Node data */
  @Deprecated public com.incomplete.cubegs.common.avro.messages.Node node;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgUpdateNode() {}

  /**
   * All-args constructor.
   * @param authorizationToken Authorization token
   * @param subsystemId Subsystem identifier Node belongs to
   * @param node New Node data
   */
  public MsgUpdateNode(java.lang.String authorizationToken, java.lang.Integer subsystemId, com.incomplete.cubegs.common.avro.messages.Node node) {
    this.authorizationToken = authorizationToken;
    this.subsystemId = subsystemId;
    this.node = node;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return authorizationToken;
    case 1: return subsystemId;
    case 2: return node;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: authorizationToken = (java.lang.String)value$; break;
    case 1: subsystemId = (java.lang.Integer)value$; break;
    case 2: node = (com.incomplete.cubegs.common.avro.messages.Node)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'authorizationToken' field.
   * @return Authorization token
   */
  public java.lang.String getAuthorizationToken() {
    return authorizationToken;
  }

  /**
   * Sets the value of the 'authorizationToken' field.
   * Authorization token
   * @param value the value to set.
   */
  public void setAuthorizationToken(java.lang.String value) {
    this.authorizationToken = value;
  }

  /**
   * Gets the value of the 'subsystemId' field.
   * @return Subsystem identifier Node belongs to
   */
  public java.lang.Integer getSubsystemId() {
    return subsystemId;
  }

  /**
   * Sets the value of the 'subsystemId' field.
   * Subsystem identifier Node belongs to
   * @param value the value to set.
   */
  public void setSubsystemId(java.lang.Integer value) {
    this.subsystemId = value;
  }

  /**
   * Gets the value of the 'node' field.
   * @return New Node data
   */
  public com.incomplete.cubegs.common.avro.messages.Node getNode() {
    return node;
  }

  /**
   * Sets the value of the 'node' field.
   * New Node data
   * @param value the value to set.
   */
  public void setNode(com.incomplete.cubegs.common.avro.messages.Node value) {
    this.node = value;
  }

  /**
   * Creates a new MsgUpdateNode RecordBuilder.
   * @return A new MsgUpdateNode RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder();
  }

  /**
   * Creates a new MsgUpdateNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgUpdateNode RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder(other);
  }

  /**
   * Creates a new MsgUpdateNode RecordBuilder by copying an existing MsgUpdateNode instance.
   * @param other The existing instance to copy.
   * @return A new MsgUpdateNode RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgUpdateNode other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder(other);
  }

  /**
   * RecordBuilder for MsgUpdateNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgUpdateNode>
    implements org.apache.avro.data.RecordBuilder<MsgUpdateNode> {

    /** Authorization token */
    private java.lang.String authorizationToken;
    /** Subsystem identifier Node belongs to */
    private int subsystemId;
    /** New Node data */
    private com.incomplete.cubegs.common.avro.messages.Node node;
    private com.incomplete.cubegs.common.avro.messages.Node.Builder nodeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subsystemId)) {
        this.subsystemId = data().deepCopy(fields()[1].schema(), other.subsystemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.node)) {
        this.node = data().deepCopy(fields()[2].schema(), other.node);
        fieldSetFlags()[2] = true;
      }
      if (other.hasNodeBuilder()) {
        this.nodeBuilder = com.incomplete.cubegs.common.avro.messages.Node.newBuilder(other.getNodeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MsgUpdateNode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgUpdateNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subsystemId)) {
        this.subsystemId = data().deepCopy(fields()[1].schema(), other.subsystemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.node)) {
        this.node = data().deepCopy(fields()[2].schema(), other.node);
        fieldSetFlags()[2] = true;
      }
      this.nodeBuilder = null;
    }

    /**
      * Gets the value of the 'authorizationToken' field.
      * Authorization token
      * @return The value.
      */
    public java.lang.String getAuthorizationToken() {
      return authorizationToken;
    }

    /**
      * Sets the value of the 'authorizationToken' field.
      * Authorization token
      * @param value The value of 'authorizationToken'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder setAuthorizationToken(java.lang.String value) {
      validate(fields()[0], value);
      this.authorizationToken = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationToken' field has been set.
      * Authorization token
      * @return True if the 'authorizationToken' field has been set, false otherwise.
      */
    public boolean hasAuthorizationToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'authorizationToken' field.
      * Authorization token
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder clearAuthorizationToken() {
      authorizationToken = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subsystemId' field.
      * Subsystem identifier Node belongs to
      * @return The value.
      */
    public java.lang.Integer getSubsystemId() {
      return subsystemId;
    }

    /**
      * Sets the value of the 'subsystemId' field.
      * Subsystem identifier Node belongs to
      * @param value The value of 'subsystemId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder setSubsystemId(int value) {
      validate(fields()[1], value);
      this.subsystemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subsystemId' field has been set.
      * Subsystem identifier Node belongs to
      * @return True if the 'subsystemId' field has been set, false otherwise.
      */
    public boolean hasSubsystemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subsystemId' field.
      * Subsystem identifier Node belongs to
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder clearSubsystemId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'node' field.
      * New Node data
      * @return The value.
      */
    public com.incomplete.cubegs.common.avro.messages.Node getNode() {
      return node;
    }

    /**
      * Sets the value of the 'node' field.
      * New Node data
      * @param value The value of 'node'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder setNode(com.incomplete.cubegs.common.avro.messages.Node value) {
      validate(fields()[2], value);
      this.nodeBuilder = null;
      this.node = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'node' field has been set.
      * New Node data
      * @return True if the 'node' field has been set, false otherwise.
      */
    public boolean hasNode() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'node' field and creates one if it doesn't exist yet.
     * New Node data
     * @return This builder.
     */
    public com.incomplete.cubegs.common.avro.messages.Node.Builder getNodeBuilder() {
      if (nodeBuilder == null) {
        if (hasNode()) {
          setNodeBuilder(com.incomplete.cubegs.common.avro.messages.Node.newBuilder(node));
        } else {
          setNodeBuilder(com.incomplete.cubegs.common.avro.messages.Node.newBuilder());
        }
      }
      return nodeBuilder;
    }

    /**
     * Sets the Builder instance for the 'node' field
     * New Node data
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder setNodeBuilder(com.incomplete.cubegs.common.avro.messages.Node.Builder value) {
      clearNode();
      nodeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'node' field has an active Builder instance
     * New Node data
     * @return True if the 'node' field has an active Builder instance
     */
    public boolean hasNodeBuilder() {
      return nodeBuilder != null;
    }

    /**
      * Clears the value of the 'node' field.
      * New Node data
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateNode.Builder clearNode() {
      node = null;
      nodeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MsgUpdateNode build() {
      try {
        MsgUpdateNode record = new MsgUpdateNode();
        record.authorizationToken = fieldSetFlags()[0] ? this.authorizationToken : (java.lang.String) defaultValue(fields()[0]);
        record.subsystemId = fieldSetFlags()[1] ? this.subsystemId : (java.lang.Integer) defaultValue(fields()[1]);
        if (nodeBuilder != null) {
          record.node = this.nodeBuilder.build();
        } else {
          record.node = fieldSetFlags()[2] ? this.node : (com.incomplete.cubegs.common.avro.messages.Node) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
