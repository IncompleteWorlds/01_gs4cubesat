/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This record contains a list of parameters */
@org.apache.avro.specific.AvroGenerated
public class ListParameters extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1588026363422508748L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ListParameters\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This record contains a list of parameters\",\"fields\":[{\"name\":\"listParameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ConfigurationParameter\",\"doc\":\"A Configuration Parameter. It is generic\",\"fields\":[{\"name\":\"identifier\",\"type\":\"int\",\"doc\":\"Unique identifier of the parameter\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the parameter\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the parameter\"},{\"name\":\"type\",\"type\":\"int\",\"doc\":\"Parameter type\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Event creation time in milliseconds\"},{\"name\":\"userId\",\"type\":\"int\",\"doc\":\"User identifier\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mission name\"},{\"name\":\"layerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Layer name\"}]}},\"doc\":\"List of parameters\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** List of parameters */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> listParameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ListParameters() {}

  /**
   * All-args constructor.
   * @param listParameters List of parameters
   */
  public ListParameters(java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> listParameters) {
    this.listParameters = listParameters;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return listParameters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: listParameters = (java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'listParameters' field.
   * @return List of parameters
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> getListParameters() {
    return listParameters;
  }

  /**
   * Sets the value of the 'listParameters' field.
   * List of parameters
   * @param value the value to set.
   */
  public void setListParameters(java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> value) {
    this.listParameters = value;
  }

  /**
   * Creates a new ListParameters RecordBuilder.
   * @return A new ListParameters RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListParameters.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.ListParameters.Builder();
  }

  /**
   * Creates a new ListParameters RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ListParameters RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListParameters.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListParameters.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.ListParameters.Builder(other);
  }

  /**
   * Creates a new ListParameters RecordBuilder by copying an existing ListParameters instance.
   * @param other The existing instance to copy.
   * @return A new ListParameters RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.ListParameters.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.ListParameters other) {
    return new com.incomplete.cubegs.common.avro.messages.ListParameters.Builder(other);
  }

  /**
   * RecordBuilder for ListParameters instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ListParameters>
    implements org.apache.avro.data.RecordBuilder<ListParameters> {

    /** List of parameters */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> listParameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListParameters.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listParameters)) {
        this.listParameters = data().deepCopy(fields()[0].schema(), other.listParameters);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ListParameters instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.ListParameters other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.listParameters)) {
        this.listParameters = data().deepCopy(fields()[0].schema(), other.listParameters);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'listParameters' field.
      * List of parameters
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> getListParameters() {
      return listParameters;
    }

    /**
      * Sets the value of the 'listParameters' field.
      * List of parameters
      * @param value The value of 'listParameters'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListParameters.Builder setListParameters(java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter> value) {
      validate(fields()[0], value);
      this.listParameters = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'listParameters' field has been set.
      * List of parameters
      * @return True if the 'listParameters' field has been set, false otherwise.
      */
    public boolean hasListParameters() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'listParameters' field.
      * List of parameters
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.ListParameters.Builder clearListParameters() {
      listParameters = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ListParameters build() {
      try {
        ListParameters record = new ListParameters();
        record.listParameters = fieldSetFlags()[0] ? this.listParameters : (java.util.List<com.incomplete.cubegs.common.avro.messages.ConfigurationParameter>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
