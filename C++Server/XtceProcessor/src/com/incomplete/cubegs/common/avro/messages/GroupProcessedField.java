/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** It describes a group of processed fields of frame (TM point) that has been already processed. It could contain all fields of a layer */
@org.apache.avro.specific.AvroGenerated
public class GroupProcessedField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3155906520314593300L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GroupProcessedField\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"It describes a group of processed fields of frame (TM point) that has been already processed. It could contain all fields of a layer\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"Identifier of the group\"},{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProcessedField\",\"doc\":\"It describes a field of frame (TM point) that has been already processed\",\"fields\":[{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Field index in the frame. Position in the frame\"},{\"name\":\"fieldTypeId\",\"type\":\"int\",\"doc\":\"Field Type identifier\"},{\"name\":\"fieldName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Duplicated with respect to Field Type Definition\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Calibrated Value of the field\"},{\"name\":\"rawValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Raw Value of the field\"}]}},\"doc\":\"List of field values (TM points values)\"},{\"name\":\"oolFlag\",\"type\":\"boolean\",\"doc\":\"Flag that indicates whether at least one field is OOL\"},{\"name\":\"oolFields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"List of fields that are in OOL state\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Identifier of the group */
  @Deprecated public int id;
  /** List of field values (TM points values) */
  @Deprecated public java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> fields;
  /** Flag that indicates whether at least one field is OOL */
  @Deprecated public boolean oolFlag;
  /** List of fields that are in OOL state */
  @Deprecated public java.util.List<java.lang.Integer> oolFields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GroupProcessedField() {}

  /**
   * All-args constructor.
   * @param id Identifier of the group
   * @param fields List of field values (TM points values)
   * @param oolFlag Flag that indicates whether at least one field is OOL
   * @param oolFields List of fields that are in OOL state
   */
  public GroupProcessedField(java.lang.Integer id, java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> fields, java.lang.Boolean oolFlag, java.util.List<java.lang.Integer> oolFields) {
    this.id = id;
    this.fields = fields;
    this.oolFlag = oolFlag;
    this.oolFields = oolFields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fields;
    case 2: return oolFlag;
    case 3: return oolFields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: fields = (java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField>)value$; break;
    case 2: oolFlag = (java.lang.Boolean)value$; break;
    case 3: oolFields = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Identifier of the group
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Identifier of the group
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fields' field.
   * @return List of field values (TM points values)
   */
  public java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * List of field values (TM points values)
   * @param value the value to set.
   */
  public void setFields(java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> value) {
    this.fields = value;
  }

  /**
   * Gets the value of the 'oolFlag' field.
   * @return Flag that indicates whether at least one field is OOL
   */
  public java.lang.Boolean getOolFlag() {
    return oolFlag;
  }

  /**
   * Sets the value of the 'oolFlag' field.
   * Flag that indicates whether at least one field is OOL
   * @param value the value to set.
   */
  public void setOolFlag(java.lang.Boolean value) {
    this.oolFlag = value;
  }

  /**
   * Gets the value of the 'oolFields' field.
   * @return List of fields that are in OOL state
   */
  public java.util.List<java.lang.Integer> getOolFields() {
    return oolFields;
  }

  /**
   * Sets the value of the 'oolFields' field.
   * List of fields that are in OOL state
   * @param value the value to set.
   */
  public void setOolFields(java.util.List<java.lang.Integer> value) {
    this.oolFields = value;
  }

  /**
   * Creates a new GroupProcessedField RecordBuilder.
   * @return A new GroupProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder();
  }

  /**
   * Creates a new GroupProcessedField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GroupProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder(other);
  }

  /**
   * Creates a new GroupProcessedField RecordBuilder by copying an existing GroupProcessedField instance.
   * @param other The existing instance to copy.
   * @return A new GroupProcessedField RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.GroupProcessedField other) {
    return new com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder(other);
  }

  /**
   * RecordBuilder for GroupProcessedField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GroupProcessedField>
    implements org.apache.avro.data.RecordBuilder<GroupProcessedField> {

    /** Identifier of the group */
    private int id;
    /** List of field values (TM points values) */
    private java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> fields;
    /** Flag that indicates whether at least one field is OOL */
    private boolean oolFlag;
    /** List of fields that are in OOL state */
    private java.util.List<java.lang.Integer> oolFields;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fields)) {
        this.fields = data().deepCopy(fields()[1].schema(), other.fields);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.oolFlag)) {
        this.oolFlag = data().deepCopy(fields()[2].schema(), other.oolFlag);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.oolFields)) {
        this.oolFields = data().deepCopy(fields()[3].schema(), other.oolFields);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GroupProcessedField instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.GroupProcessedField other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fields)) {
        this.fields = data().deepCopy(fields()[1].schema(), other.fields);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.oolFlag)) {
        this.oolFlag = data().deepCopy(fields()[2].schema(), other.oolFlag);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.oolFields)) {
        this.oolFields = data().deepCopy(fields()[3].schema(), other.oolFields);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Identifier of the group
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Identifier of the group
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Identifier of the group
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Identifier of the group
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fields' field.
      * List of field values (TM points values)
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> getFields() {
      return fields;
    }

    /**
      * Sets the value of the 'fields' field.
      * List of field values (TM points values)
      * @param value The value of 'fields'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder setFields(java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField> value) {
      validate(fields()[1], value);
      this.fields = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fields' field has been set.
      * List of field values (TM points values)
      * @return True if the 'fields' field has been set, false otherwise.
      */
    public boolean hasFields() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fields' field.
      * List of field values (TM points values)
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder clearFields() {
      fields = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'oolFlag' field.
      * Flag that indicates whether at least one field is OOL
      * @return The value.
      */
    public java.lang.Boolean getOolFlag() {
      return oolFlag;
    }

    /**
      * Sets the value of the 'oolFlag' field.
      * Flag that indicates whether at least one field is OOL
      * @param value The value of 'oolFlag'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder setOolFlag(boolean value) {
      validate(fields()[2], value);
      this.oolFlag = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'oolFlag' field has been set.
      * Flag that indicates whether at least one field is OOL
      * @return True if the 'oolFlag' field has been set, false otherwise.
      */
    public boolean hasOolFlag() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'oolFlag' field.
      * Flag that indicates whether at least one field is OOL
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder clearOolFlag() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'oolFields' field.
      * List of fields that are in OOL state
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getOolFields() {
      return oolFields;
    }

    /**
      * Sets the value of the 'oolFields' field.
      * List of fields that are in OOL state
      * @param value The value of 'oolFields'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder setOolFields(java.util.List<java.lang.Integer> value) {
      validate(fields()[3], value);
      this.oolFields = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'oolFields' field has been set.
      * List of fields that are in OOL state
      * @return True if the 'oolFields' field has been set, false otherwise.
      */
    public boolean hasOolFields() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'oolFields' field.
      * List of fields that are in OOL state
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.GroupProcessedField.Builder clearOolFields() {
      oolFields = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GroupProcessedField build() {
      try {
        GroupProcessedField record = new GroupProcessedField();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.fields = fieldSetFlags()[1] ? this.fields : (java.util.List<com.incomplete.cubegs.common.avro.messages.ProcessedField>) defaultValue(fields()[1]);
        record.oolFlag = fieldSetFlags()[2] ? this.oolFlag : (java.lang.Boolean) defaultValue(fields()[2]);
        record.oolFields = fieldSetFlags()[3] ? this.oolFields : (java.util.List<java.lang.Integer>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
