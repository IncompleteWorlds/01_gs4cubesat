/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This message updates an existing mission. It returns an error code */
@org.apache.avro.specific.AvroGenerated
public class MsgUpdateMission extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6555590767614652491L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MsgUpdateMission\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"doc\":\"This message updates an existing mission. It returns an error code\",\"fields\":[{\"name\":\"authorizationToken\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Authorization token\"},{\"name\":\"mission\",\"type\":{\"type\":\"record\",\"name\":\"Mission\",\"doc\":\"This record contains the mission parameters\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique Mission name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the mission\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Country of the company / entity owning the mission\"},{\"name\":\"owner\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Company / entity that owns the mission\"},{\"name\":\"creationTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Creation time. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"adminIdentifier\",\"type\":\"int\",\"doc\":\"Mission administrator\"},{\"name\":\"emailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Email address of the Owner\"},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Contact number of the Owner\"},{\"name\":\"listSatellites\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Satellite\",\"doc\":\"This record contains the Satellite parameters\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the satellite\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the mission\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the satellite\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Short code of the satellite\"},{\"name\":\"launchDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Launch date. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"listSubsystems\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Subsystem\",\"doc\":\"This record contains the definition of a subsystem\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Subsystem name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the Subsystem\"},{\"name\":\"satelliteName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Satellite name\"}]}}],\"doc\":\"List of subsystems of the satellite\"}]}}],\"doc\":\"List of satellites that belong to the mission\"}]},\"doc\":\"Updated Mission\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Authorization token */
  @Deprecated public java.lang.String authorizationToken;
  /** Updated Mission */
  @Deprecated public com.incomplete.cubegs.common.avro.messages.Mission mission;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MsgUpdateMission() {}

  /**
   * All-args constructor.
   * @param authorizationToken Authorization token
   * @param mission Updated Mission
   */
  public MsgUpdateMission(java.lang.String authorizationToken, com.incomplete.cubegs.common.avro.messages.Mission mission) {
    this.authorizationToken = authorizationToken;
    this.mission = mission;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return authorizationToken;
    case 1: return mission;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: authorizationToken = (java.lang.String)value$; break;
    case 1: mission = (com.incomplete.cubegs.common.avro.messages.Mission)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'authorizationToken' field.
   * @return Authorization token
   */
  public java.lang.String getAuthorizationToken() {
    return authorizationToken;
  }

  /**
   * Sets the value of the 'authorizationToken' field.
   * Authorization token
   * @param value the value to set.
   */
  public void setAuthorizationToken(java.lang.String value) {
    this.authorizationToken = value;
  }

  /**
   * Gets the value of the 'mission' field.
   * @return Updated Mission
   */
  public com.incomplete.cubegs.common.avro.messages.Mission getMission() {
    return mission;
  }

  /**
   * Sets the value of the 'mission' field.
   * Updated Mission
   * @param value the value to set.
   */
  public void setMission(com.incomplete.cubegs.common.avro.messages.Mission value) {
    this.mission = value;
  }

  /**
   * Creates a new MsgUpdateMission RecordBuilder.
   * @return A new MsgUpdateMission RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder();
  }

  /**
   * Creates a new MsgUpdateMission RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MsgUpdateMission RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder(other);
  }

  /**
   * Creates a new MsgUpdateMission RecordBuilder by copying an existing MsgUpdateMission instance.
   * @param other The existing instance to copy.
   * @return A new MsgUpdateMission RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.MsgUpdateMission other) {
    return new com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder(other);
  }

  /**
   * RecordBuilder for MsgUpdateMission instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MsgUpdateMission>
    implements org.apache.avro.data.RecordBuilder<MsgUpdateMission> {

    /** Authorization token */
    private java.lang.String authorizationToken;
    /** Updated Mission */
    private com.incomplete.cubegs.common.avro.messages.Mission mission;
    private com.incomplete.cubegs.common.avro.messages.Mission.Builder missionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mission)) {
        this.mission = data().deepCopy(fields()[1].schema(), other.mission);
        fieldSetFlags()[1] = true;
      }
      if (other.hasMissionBuilder()) {
        this.missionBuilder = com.incomplete.cubegs.common.avro.messages.Mission.newBuilder(other.getMissionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MsgUpdateMission instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.MsgUpdateMission other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.authorizationToken)) {
        this.authorizationToken = data().deepCopy(fields()[0].schema(), other.authorizationToken);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mission)) {
        this.mission = data().deepCopy(fields()[1].schema(), other.mission);
        fieldSetFlags()[1] = true;
      }
      this.missionBuilder = null;
    }

    /**
      * Gets the value of the 'authorizationToken' field.
      * Authorization token
      * @return The value.
      */
    public java.lang.String getAuthorizationToken() {
      return authorizationToken;
    }

    /**
      * Sets the value of the 'authorizationToken' field.
      * Authorization token
      * @param value The value of 'authorizationToken'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder setAuthorizationToken(java.lang.String value) {
      validate(fields()[0], value);
      this.authorizationToken = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'authorizationToken' field has been set.
      * Authorization token
      * @return True if the 'authorizationToken' field has been set, false otherwise.
      */
    public boolean hasAuthorizationToken() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'authorizationToken' field.
      * Authorization token
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder clearAuthorizationToken() {
      authorizationToken = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mission' field.
      * Updated Mission
      * @return The value.
      */
    public com.incomplete.cubegs.common.avro.messages.Mission getMission() {
      return mission;
    }

    /**
      * Sets the value of the 'mission' field.
      * Updated Mission
      * @param value The value of 'mission'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder setMission(com.incomplete.cubegs.common.avro.messages.Mission value) {
      validate(fields()[1], value);
      this.missionBuilder = null;
      this.mission = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mission' field has been set.
      * Updated Mission
      * @return True if the 'mission' field has been set, false otherwise.
      */
    public boolean hasMission() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'mission' field and creates one if it doesn't exist yet.
     * Updated Mission
     * @return This builder.
     */
    public com.incomplete.cubegs.common.avro.messages.Mission.Builder getMissionBuilder() {
      if (missionBuilder == null) {
        if (hasMission()) {
          setMissionBuilder(com.incomplete.cubegs.common.avro.messages.Mission.newBuilder(mission));
        } else {
          setMissionBuilder(com.incomplete.cubegs.common.avro.messages.Mission.newBuilder());
        }
      }
      return missionBuilder;
    }

    /**
     * Sets the Builder instance for the 'mission' field
     * Updated Mission
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder setMissionBuilder(com.incomplete.cubegs.common.avro.messages.Mission.Builder value) {
      clearMission();
      missionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mission' field has an active Builder instance
     * Updated Mission
     * @return True if the 'mission' field has an active Builder instance
     */
    public boolean hasMissionBuilder() {
      return missionBuilder != null;
    }

    /**
      * Clears the value of the 'mission' field.
      * Updated Mission
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.MsgUpdateMission.Builder clearMission() {
      mission = null;
      missionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MsgUpdateMission build() {
      try {
        MsgUpdateMission record = new MsgUpdateMission();
        record.authorizationToken = fieldSetFlags()[0] ? this.authorizationToken : (java.lang.String) defaultValue(fields()[0]);
        if (missionBuilder != null) {
          record.mission = this.missionBuilder.build();
        } else {
          record.mission = fieldSetFlags()[1] ? this.mission : (com.incomplete.cubegs.common.avro.messages.Mission) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
