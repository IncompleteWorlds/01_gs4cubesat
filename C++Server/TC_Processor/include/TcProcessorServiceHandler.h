/**
 *  CubeGS
 *  An online Ground Segment for Cubesats and Small Sats
 *  (c) 2017 Incomplete Worlds
 *
 */

#ifndef __HKTM_PROCESSOR_SERVICEHANDLER_H_INCLUDED__
#define __HKTM_PROCESSOR_SERVICEHANDLER_H_INCLUDED__


// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thread>

#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;


#include "Constants.h"
#include "M_C_ServiceClientIF.h"

#include "ExternalIF.h"
#include "register_utils.h"

#include "HkTmProcessorService.h"

using namespace  ::IW;


class HkTmProcessorServiceHandler : virtual public HkTmProcessorServiceIf {
public:
    HkTmProcessorServiceHandler()
        : registerThread{}
    {
        string tmpPort = ConfigurationManager::getInstance().getValue(ConfigurationManager::KEY_THRIFT_HKTM_PROCESSOR_PORT);
        int archivePort = atoi(tmpPort.c_str());

        string archiveUrl = ConfigurationManager::getInstance().getValue(ConfigurationManager::KEY_THRIFT_HKTM_PROCESSOR_URL);

        // Start a separated thread that register the handler
        // We do not wait for it
        this->registerThread = move( std::thread{registerService, HKTM_PROCESSOR_DEFAULT_NAME, archiveUrl, archivePort} );
    }

    // ---- MODULE OPERATIONS ----------------------------------------
    // ---------------------------------------------------------------
    /**
    * Start the component
    */
    void start()
    {
        // Your implementation goes here
        printf("HK TM Processor start\n");
    }

    /**
     * Shutdown the component
     */
    void shutdown()
    {
        // Your implementation goes here
        printf("HK TM Processor shutdown\n");
    }

    /**
     * Hearbeat. It indicates whether the component is alive
     * 0 - It is alive
     * -1 - On error
     */
    int32_t heartbeat()
    {
        // Your implementation goes here
        printf("HK TM Processor heartbeat\n");
        return 0;
    }

    // ---- HK TM PROCESSOR OPERATIONS -------------------------------
    // ---------------------------------------------------------------
    /**
     * Receive a new frame for the currently connected G/S (and hence
     * from the S/C)
     *
     * @param inFrame
     * @param inFrameSize
     */
    void receiveFrame(const std::string& inFrame, const int32_t inFrameSize)
    {
        // Your implementation goes here
        printf("receiveFrame\n");
    }


private:
    thread  registerThread;
};


#endif   // __HKTM_PROCESSOR_SERVICEHANDLER_H_INCLUDED__
