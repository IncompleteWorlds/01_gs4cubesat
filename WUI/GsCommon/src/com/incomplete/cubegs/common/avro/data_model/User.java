/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.data_model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** An User with a role */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1590148892932120003L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.incomplete.cubegs.common.avro.data_model\",\"doc\":\"An User with a role\",\"fields\":[{\"name\":\"userId\",\"type\":\"int\",\"doc\":\"User identifier\"},{\"name\":\"userName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User name, in the system\"},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User password, in the system\"},{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First name\"},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last name\"},{\"name\":\"emailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"User email address\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Mission name. Mission user is working on\"},{\"name\":\"roleId\",\"type\":\"int\",\"doc\":\"User role id\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<User> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this User to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a User from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a User instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** User identifier */
  private int userId;
  /** User name, in the system */
  private java.lang.String userName;
  /** User password, in the system */
  private java.lang.String password;
  /** First name */
  private java.lang.String firstName;
  /** Last name */
  private java.lang.String lastName;
  /** User email address */
  private java.lang.String emailAddress;
  /** Mission name. Mission user is working on */
  private java.lang.String missionName;
  /** User role id */
  private int roleId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param userId User identifier
   * @param userName User name, in the system
   * @param password User password, in the system
   * @param firstName First name
   * @param lastName Last name
   * @param emailAddress User email address
   * @param missionName Mission name. Mission user is working on
   * @param roleId User role id
   */
  public User(java.lang.Integer userId, java.lang.String userName, java.lang.String password, java.lang.String firstName, java.lang.String lastName, java.lang.String emailAddress, java.lang.String missionName, java.lang.Integer roleId) {
    this.userId = userId;
    this.userName = userName;
    this.password = password;
    this.firstName = firstName;
    this.lastName = lastName;
    this.emailAddress = emailAddress;
    this.missionName = missionName;
    this.roleId = roleId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return userName;
    case 2: return password;
    case 3: return firstName;
    case 4: return lastName;
    case 5: return emailAddress;
    case 6: return missionName;
    case 7: return roleId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.Integer)value$; break;
    case 1: userName = value$ != null ? value$.toString() : null; break;
    case 2: password = value$ != null ? value$.toString() : null; break;
    case 3: firstName = value$ != null ? value$.toString() : null; break;
    case 4: lastName = value$ != null ? value$.toString() : null; break;
    case 5: emailAddress = value$ != null ? value$.toString() : null; break;
    case 6: missionName = value$ != null ? value$.toString() : null; break;
    case 7: roleId = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return User identifier
   */
  public int getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * User identifier
   * @param value the value to set.
   */
  public void setUserId(int value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return User name, in the system
   */
  public java.lang.String getUserName() {
    return userName;
  }


  /**
   * Sets the value of the 'userName' field.
   * User name, in the system
   * @param value the value to set.
   */
  public void setUserName(java.lang.String value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return User password, in the system
   */
  public java.lang.String getPassword() {
    return password;
  }


  /**
   * Sets the value of the 'password' field.
   * User password, in the system
   * @param value the value to set.
   */
  public void setPassword(java.lang.String value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return First name
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * First name
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return Last name
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * Last name
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return User email address
   */
  public java.lang.String getEmailAddress() {
    return emailAddress;
  }


  /**
   * Sets the value of the 'emailAddress' field.
   * User email address
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.String value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'missionName' field.
   * @return Mission name. Mission user is working on
   */
  public java.lang.String getMissionName() {
    return missionName;
  }


  /**
   * Sets the value of the 'missionName' field.
   * Mission name. Mission user is working on
   * @param value the value to set.
   */
  public void setMissionName(java.lang.String value) {
    this.missionName = value;
  }

  /**
   * Gets the value of the 'roleId' field.
   * @return User role id
   */
  public int getRoleId() {
    return roleId;
  }


  /**
   * Sets the value of the 'roleId' field.
   * User role id
   * @param value the value to set.
   */
  public void setRoleId(int value) {
    this.roleId = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.User.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.data_model.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.User.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.User.Builder other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.User.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.User.Builder(other);
    }
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.User.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.User other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.User.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.User.Builder(other);
    }
  }

  /**
   * RecordBuilder for User instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    /** User identifier */
    private int userId;
    /** User name, in the system */
    private java.lang.String userName;
    /** User password, in the system */
    private java.lang.String password;
    /** First name */
    private java.lang.String firstName;
    /** Last name */
    private java.lang.String lastName;
    /** User email address */
    private java.lang.String emailAddress;
    /** Mission name. Mission user is working on */
    private java.lang.String missionName;
    /** User role id */
    private int roleId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.password)) {
        this.password = data().deepCopy(fields()[2].schema(), other.password);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[5].schema(), other.emailAddress);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.missionName)) {
        this.missionName = data().deepCopy(fields()[6].schema(), other.missionName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.roleId)) {
        this.roleId = data().deepCopy(fields()[7].schema(), other.roleId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.User other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userName)) {
        this.userName = data().deepCopy(fields()[1].schema(), other.userName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.password)) {
        this.password = data().deepCopy(fields()[2].schema(), other.password);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[5].schema(), other.emailAddress);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.missionName)) {
        this.missionName = data().deepCopy(fields()[6].schema(), other.missionName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.roleId)) {
        this.roleId = data().deepCopy(fields()[7].schema(), other.roleId);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * User identifier
      * @return The value.
      */
    public int getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * User identifier
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * User identifier
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * User identifier
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * User name, in the system
      * @return The value.
      */
    public java.lang.String getUserName() {
      return userName;
    }


    /**
      * Sets the value of the 'userName' field.
      * User name, in the system
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setUserName(java.lang.String value) {
      validate(fields()[1], value);
      this.userName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * User name, in the system
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userName' field.
      * User name, in the system
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * User password, in the system
      * @return The value.
      */
    public java.lang.String getPassword() {
      return password;
    }


    /**
      * Sets the value of the 'password' field.
      * User password, in the system
      * @param value The value of 'password'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setPassword(java.lang.String value) {
      validate(fields()[2], value);
      this.password = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * User password, in the system
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'password' field.
      * User password, in the system
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearPassword() {
      password = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * First name
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * First name
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setFirstName(java.lang.String value) {
      validate(fields()[3], value);
      this.firstName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * First name
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstName' field.
      * First name
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * Last name
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * Last name
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setLastName(java.lang.String value) {
      validate(fields()[4], value);
      this.lastName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * Last name
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastName' field.
      * Last name
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * User email address
      * @return The value.
      */
    public java.lang.String getEmailAddress() {
      return emailAddress;
    }


    /**
      * Sets the value of the 'emailAddress' field.
      * User email address
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setEmailAddress(java.lang.String value) {
      validate(fields()[5], value);
      this.emailAddress = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * User email address
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * User email address
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'missionName' field.
      * Mission name. Mission user is working on
      * @return The value.
      */
    public java.lang.String getMissionName() {
      return missionName;
    }


    /**
      * Sets the value of the 'missionName' field.
      * Mission name. Mission user is working on
      * @param value The value of 'missionName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setMissionName(java.lang.String value) {
      validate(fields()[6], value);
      this.missionName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'missionName' field has been set.
      * Mission name. Mission user is working on
      * @return True if the 'missionName' field has been set, false otherwise.
      */
    public boolean hasMissionName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'missionName' field.
      * Mission name. Mission user is working on
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearMissionName() {
      missionName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'roleId' field.
      * User role id
      * @return The value.
      */
    public int getRoleId() {
      return roleId;
    }


    /**
      * Sets the value of the 'roleId' field.
      * User role id
      * @param value The value of 'roleId'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder setRoleId(int value) {
      validate(fields()[7], value);
      this.roleId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'roleId' field has been set.
      * User role id
      * @return True if the 'roleId' field has been set, false otherwise.
      */
    public boolean hasRoleId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'roleId' field.
      * User role id
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.User.Builder clearRoleId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.Integer) defaultValue(fields()[0]);
        record.userName = fieldSetFlags()[1] ? this.userName : (java.lang.String) defaultValue(fields()[1]);
        record.password = fieldSetFlags()[2] ? this.password : (java.lang.String) defaultValue(fields()[2]);
        record.firstName = fieldSetFlags()[3] ? this.firstName : (java.lang.String) defaultValue(fields()[3]);
        record.lastName = fieldSetFlags()[4] ? this.lastName : (java.lang.String) defaultValue(fields()[4]);
        record.emailAddress = fieldSetFlags()[5] ? this.emailAddress : (java.lang.String) defaultValue(fields()[5]);
        record.missionName = fieldSetFlags()[6] ? this.missionName : (java.lang.String) defaultValue(fields()[6]);
        record.roleId = fieldSetFlags()[7] ? this.roleId : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.userId);

    out.writeString(this.userName);

    out.writeString(this.password);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeString(this.emailAddress);

    out.writeString(this.missionName);

    out.writeInt(this.roleId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userId = in.readInt();

      this.userName = in.readString();

      this.password = in.readString();

      this.firstName = in.readString();

      this.lastName = in.readString();

      this.emailAddress = in.readString();

      this.missionName = in.readString();

      this.roleId = in.readInt();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userId = in.readInt();
          break;

        case 1:
          this.userName = in.readString();
          break;

        case 2:
          this.password = in.readString();
          break;

        case 3:
          this.firstName = in.readString();
          break;

        case 4:
          this.lastName = in.readString();
          break;

        case 5:
          this.emailAddress = in.readString();
          break;

        case 6:
          this.missionName = in.readString();
          break;

        case 7:
          this.roleId = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










