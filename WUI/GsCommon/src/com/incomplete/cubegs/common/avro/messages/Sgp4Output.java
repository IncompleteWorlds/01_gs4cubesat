/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.messages;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Sgp4Output extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3137457183573017360L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sgp4Output\",\"namespace\":\"com.incomplete.cubegs.common.avro.messages\",\"fields\":[{\"name\":\"reference_frame\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"EarthMJ2000Eq\"},{\"name\":\"epoch_format\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)\"},{\"name\":\"output_format\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"CSV, JSON, CCSDS-OEM\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sgp4Output> ENCODER =
      new BinaryMessageEncoder<Sgp4Output>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sgp4Output> DECODER =
      new BinaryMessageDecoder<Sgp4Output>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Sgp4Output> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Sgp4Output> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Sgp4Output> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sgp4Output>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sgp4Output to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sgp4Output from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sgp4Output instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sgp4Output fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** EarthMJ2000Eq */
  private java.lang.String reference_frame;
  /** Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000) */
  private java.lang.String epoch_format;
  /** CSV, JSON, CCSDS-OEM */
  private java.lang.String output_format;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sgp4Output() {}

  /**
   * All-args constructor.
   * @param reference_frame EarthMJ2000Eq
   * @param epoch_format Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
   * @param output_format CSV, JSON, CCSDS-OEM
   */
  public Sgp4Output(java.lang.String reference_frame, java.lang.String epoch_format, java.lang.String output_format) {
    this.reference_frame = reference_frame;
    this.epoch_format = epoch_format;
    this.output_format = output_format;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reference_frame;
    case 1: return epoch_format;
    case 2: return output_format;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reference_frame = value$ != null ? value$.toString() : null; break;
    case 1: epoch_format = value$ != null ? value$.toString() : null; break;
    case 2: output_format = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'reference_frame' field.
   * @return EarthMJ2000Eq
   */
  public java.lang.String getReferenceFrame() {
    return reference_frame;
  }


  /**
   * Sets the value of the 'reference_frame' field.
   * EarthMJ2000Eq
   * @param value the value to set.
   */
  public void setReferenceFrame(java.lang.String value) {
    this.reference_frame = value;
  }

  /**
   * Gets the value of the 'epoch_format' field.
   * @return Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
   */
  public java.lang.String getEpochFormat() {
    return epoch_format;
  }


  /**
   * Sets the value of the 'epoch_format' field.
   * Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
   * @param value the value to set.
   */
  public void setEpochFormat(java.lang.String value) {
    this.epoch_format = value;
  }

  /**
   * Gets the value of the 'output_format' field.
   * @return CSV, JSON, CCSDS-OEM
   */
  public java.lang.String getOutputFormat() {
    return output_format;
  }


  /**
   * Sets the value of the 'output_format' field.
   * CSV, JSON, CCSDS-OEM
   * @param value the value to set.
   */
  public void setOutputFormat(java.lang.String value) {
    this.output_format = value;
  }

  /**
   * Creates a new Sgp4Output RecordBuilder.
   * @return A new Sgp4Output RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder();
  }

  /**
   * Creates a new Sgp4Output RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sgp4Output RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder(other);
    }
  }

  /**
   * Creates a new Sgp4Output RecordBuilder by copying an existing Sgp4Output instance.
   * @param other The existing instance to copy.
   * @return A new Sgp4Output RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder newBuilder(com.incomplete.cubegs.common.avro.messages.Sgp4Output other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sgp4Output instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sgp4Output>
    implements org.apache.avro.data.RecordBuilder<Sgp4Output> {

    /** EarthMJ2000Eq */
    private java.lang.String reference_frame;
    /** Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000) */
    private java.lang.String epoch_format;
    /** CSV, JSON, CCSDS-OEM */
    private java.lang.String output_format;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reference_frame)) {
        this.reference_frame = data().deepCopy(fields()[0].schema(), other.reference_frame);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.epoch_format)) {
        this.epoch_format = data().deepCopy(fields()[1].schema(), other.epoch_format);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.output_format)) {
        this.output_format = data().deepCopy(fields()[2].schema(), other.output_format);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Sgp4Output instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.messages.Sgp4Output other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.reference_frame)) {
        this.reference_frame = data().deepCopy(fields()[0].schema(), other.reference_frame);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.epoch_format)) {
        this.epoch_format = data().deepCopy(fields()[1].schema(), other.epoch_format);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.output_format)) {
        this.output_format = data().deepCopy(fields()[2].schema(), other.output_format);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'reference_frame' field.
      * EarthMJ2000Eq
      * @return The value.
      */
    public java.lang.String getReferenceFrame() {
      return reference_frame;
    }


    /**
      * Sets the value of the 'reference_frame' field.
      * EarthMJ2000Eq
      * @param value The value of 'reference_frame'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder setReferenceFrame(java.lang.String value) {
      validate(fields()[0], value);
      this.reference_frame = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reference_frame' field has been set.
      * EarthMJ2000Eq
      * @return True if the 'reference_frame' field has been set, false otherwise.
      */
    public boolean hasReferenceFrame() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reference_frame' field.
      * EarthMJ2000Eq
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder clearReferenceFrame() {
      reference_frame = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'epoch_format' field.
      * Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
      * @return The value.
      */
    public java.lang.String getEpochFormat() {
      return epoch_format;
    }


    /**
      * Sets the value of the 'epoch_format' field.
      * Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
      * @param value The value of 'epoch_format'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder setEpochFormat(java.lang.String value) {
      validate(fields()[1], value);
      this.epoch_format = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'epoch_format' field has been set.
      * Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
      * @return True if the 'epoch_format' field has been set, false otherwise.
      */
    public boolean hasEpochFormat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'epoch_format' field.
      * Epoch format; UTCGregorian (UTC)      UTCModJulian  (MJD_2000)
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder clearEpochFormat() {
      epoch_format = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'output_format' field.
      * CSV, JSON, CCSDS-OEM
      * @return The value.
      */
    public java.lang.String getOutputFormat() {
      return output_format;
    }


    /**
      * Sets the value of the 'output_format' field.
      * CSV, JSON, CCSDS-OEM
      * @param value The value of 'output_format'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder setOutputFormat(java.lang.String value) {
      validate(fields()[2], value);
      this.output_format = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'output_format' field has been set.
      * CSV, JSON, CCSDS-OEM
      * @return True if the 'output_format' field has been set, false otherwise.
      */
    public boolean hasOutputFormat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'output_format' field.
      * CSV, JSON, CCSDS-OEM
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.messages.Sgp4Output.Builder clearOutputFormat() {
      output_format = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sgp4Output build() {
      try {
        Sgp4Output record = new Sgp4Output();
        record.reference_frame = fieldSetFlags()[0] ? this.reference_frame : (java.lang.String) defaultValue(fields()[0]);
        record.epoch_format = fieldSetFlags()[1] ? this.epoch_format : (java.lang.String) defaultValue(fields()[1]);
        record.output_format = fieldSetFlags()[2] ? this.output_format : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sgp4Output>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sgp4Output>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sgp4Output>
    READER$ = (org.apache.avro.io.DatumReader<Sgp4Output>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.reference_frame);

    out.writeString(this.epoch_format);

    out.writeString(this.output_format);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.reference_frame = in.readString();

      this.epoch_format = in.readString();

      this.output_format = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.reference_frame = in.readString();
          break;

        case 1:
          this.epoch_format = in.readString();
          break;

        case 2:
          this.output_format = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










