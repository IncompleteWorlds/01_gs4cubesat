/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.data_model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This record describes a Satellite state vector */
@org.apache.avro.specific.AvroGenerated
public class StateVector extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4401876232137524611L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StateVector\",\"namespace\":\"com.incomplete.cubegs.common.avro.data_model\",\"doc\":\"This record describes a Satellite state vector\",\"fields\":[{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"State vector time instant. It can be UTC Gregorain or Julian Date\"},{\"name\":\"position\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"S/C position in km or other unit\"},{\"name\":\"velocity\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Velocity in km/s or other unit\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StateVector> ENCODER =
      new BinaryMessageEncoder<StateVector>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StateVector> DECODER =
      new BinaryMessageDecoder<StateVector>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StateVector> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StateVector> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StateVector> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StateVector>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StateVector to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StateVector from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StateVector instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StateVector fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** State vector time instant. It can be UTC Gregorain or Julian Date */
  private java.lang.String time;
  /** S/C position in km or other unit */
  private java.util.List<java.lang.Double> position;
  /** Velocity in km/s or other unit */
  private java.util.List<java.lang.Double> velocity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StateVector() {}

  /**
   * All-args constructor.
   * @param time State vector time instant. It can be UTC Gregorain or Julian Date
   * @param position S/C position in km or other unit
   * @param velocity Velocity in km/s or other unit
   */
  public StateVector(java.lang.String time, java.util.List<java.lang.Double> position, java.util.List<java.lang.Double> velocity) {
    this.time = time;
    this.position = position;
    this.velocity = velocity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return position;
    case 2: return velocity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = value$ != null ? value$.toString() : null; break;
    case 1: position = (java.util.List<java.lang.Double>)value$; break;
    case 2: velocity = (java.util.List<java.lang.Double>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return State vector time instant. It can be UTC Gregorain or Julian Date
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * State vector time instant. It can be UTC Gregorain or Julian Date
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return S/C position in km or other unit
   */
  public java.util.List<java.lang.Double> getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * S/C position in km or other unit
   * @param value the value to set.
   */
  public void setPosition(java.util.List<java.lang.Double> value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return Velocity in km/s or other unit
   */
  public java.util.List<java.lang.Double> getVelocity() {
    return velocity;
  }


  /**
   * Sets the value of the 'velocity' field.
   * Velocity in km/s or other unit
   * @param value the value to set.
   */
  public void setVelocity(java.util.List<java.lang.Double> value) {
    this.velocity = value;
  }

  /**
   * Creates a new StateVector RecordBuilder.
   * @return A new StateVector RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.StateVector.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.data_model.StateVector.Builder();
  }

  /**
   * Creates a new StateVector RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StateVector RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.StateVector.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.StateVector.Builder other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.StateVector.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.StateVector.Builder(other);
    }
  }

  /**
   * Creates a new StateVector RecordBuilder by copying an existing StateVector instance.
   * @param other The existing instance to copy.
   * @return A new StateVector RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.StateVector.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.StateVector other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.StateVector.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.StateVector.Builder(other);
    }
  }

  /**
   * RecordBuilder for StateVector instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StateVector>
    implements org.apache.avro.data.RecordBuilder<StateVector> {

    /** State vector time instant. It can be UTC Gregorain or Julian Date */
    private java.lang.String time;
    /** S/C position in km or other unit */
    private java.util.List<java.lang.Double> position;
    /** Velocity in km/s or other unit */
    private java.util.List<java.lang.Double> velocity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.StateVector.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.velocity)) {
        this.velocity = data().deepCopy(fields()[2].schema(), other.velocity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing StateVector instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.StateVector other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.velocity)) {
        this.velocity = data().deepCopy(fields()[2].schema(), other.velocity);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * State vector time instant. It can be UTC Gregorain or Julian Date
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * State vector time instant. It can be UTC Gregorain or Julian Date
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder setTime(java.lang.String value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * State vector time instant. It can be UTC Gregorain or Julian Date
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * State vector time instant. It can be UTC Gregorain or Julian Date
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder clearTime() {
      time = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * S/C position in km or other unit
      * @return The value.
      */
    public java.util.List<java.lang.Double> getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * S/C position in km or other unit
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder setPosition(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * S/C position in km or other unit
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'position' field.
      * S/C position in km or other unit
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder clearPosition() {
      position = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * Velocity in km/s or other unit
      * @return The value.
      */
    public java.util.List<java.lang.Double> getVelocity() {
      return velocity;
    }


    /**
      * Sets the value of the 'velocity' field.
      * Velocity in km/s or other unit
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder setVelocity(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.velocity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * Velocity in km/s or other unit
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'velocity' field.
      * Velocity in km/s or other unit
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.StateVector.Builder clearVelocity() {
      velocity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StateVector build() {
      try {
        StateVector record = new StateVector();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.String) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.velocity = fieldSetFlags()[2] ? this.velocity : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StateVector>
    WRITER$ = (org.apache.avro.io.DatumWriter<StateVector>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StateVector>
    READER$ = (org.apache.avro.io.DatumReader<StateVector>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.time);

    long size0 = this.position.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.position) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.velocity.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Double e1: this.velocity) {
      actualSize1++;
      out.startItem();
      out.writeDouble(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.time = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.position;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("position").schema());
        this.position = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Double> a1 = this.velocity;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("velocity").schema());
        this.velocity = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readDouble();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.time = in.readString();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.position;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("position").schema());
            this.position = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 2:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Double> a1 = this.velocity;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("velocity").schema());
            this.velocity = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readDouble();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










