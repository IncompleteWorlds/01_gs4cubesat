/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.incomplete.cubegs.common.avro.data_model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This record contains the Satellite parameters */
@org.apache.avro.specific.AvroGenerated
public class Satellite extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7177676422460822825L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Satellite\",\"namespace\":\"com.incomplete.cubegs.common.avro.data_model\",\"doc\":\"This record contains the Satellite parameters\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the satellite\"},{\"name\":\"missionName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the mission\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the satellite\"},{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Short code of the satellite\"},{\"name\":\"launchDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Launch date. Format: YYYY-MM-DDTHH:mm:SS\"},{\"name\":\"listSubsystems\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Subsystem\",\"doc\":\"This record contains the definition of a subsystem\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Subsystem name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the Subsystem\"},{\"name\":\"satelliteName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Satellite name\"}]}}],\"doc\":\"List of subsystems of the satellite\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Satellite> ENCODER =
      new BinaryMessageEncoder<Satellite>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Satellite> DECODER =
      new BinaryMessageDecoder<Satellite>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Satellite> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Satellite> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Satellite> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Satellite>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Satellite to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Satellite from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Satellite instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Satellite fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the satellite */
  private java.lang.String name;
  /** Name of the mission */
  private java.lang.String missionName;
  /** Description of the satellite */
  private java.lang.String description;
  /** Short code of the satellite */
  private java.lang.String code;
  /** Launch date. Format: YYYY-MM-DDTHH:mm:SS */
  private java.lang.String launchDate;
  /** List of subsystems of the satellite */
  private java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> listSubsystems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Satellite() {}

  /**
   * All-args constructor.
   * @param name Name of the satellite
   * @param missionName Name of the mission
   * @param description Description of the satellite
   * @param code Short code of the satellite
   * @param launchDate Launch date. Format: YYYY-MM-DDTHH:mm:SS
   * @param listSubsystems List of subsystems of the satellite
   */
  public Satellite(java.lang.String name, java.lang.String missionName, java.lang.String description, java.lang.String code, java.lang.String launchDate, java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> listSubsystems) {
    this.name = name;
    this.missionName = missionName;
    this.description = description;
    this.code = code;
    this.launchDate = launchDate;
    this.listSubsystems = listSubsystems;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return missionName;
    case 2: return description;
    case 3: return code;
    case 4: return launchDate;
    case 5: return listSubsystems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: missionName = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: code = value$ != null ? value$.toString() : null; break;
    case 4: launchDate = value$ != null ? value$.toString() : null; break;
    case 5: listSubsystems = (java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the satellite
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Name of the satellite
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'missionName' field.
   * @return Name of the mission
   */
  public java.lang.String getMissionName() {
    return missionName;
  }


  /**
   * Sets the value of the 'missionName' field.
   * Name of the mission
   * @param value the value to set.
   */
  public void setMissionName(java.lang.String value) {
    this.missionName = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the satellite
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Description of the satellite
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Short code of the satellite
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * Short code of the satellite
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'launchDate' field.
   * @return Launch date. Format: YYYY-MM-DDTHH:mm:SS
   */
  public java.lang.String getLaunchDate() {
    return launchDate;
  }


  /**
   * Sets the value of the 'launchDate' field.
   * Launch date. Format: YYYY-MM-DDTHH:mm:SS
   * @param value the value to set.
   */
  public void setLaunchDate(java.lang.String value) {
    this.launchDate = value;
  }

  /**
   * Gets the value of the 'listSubsystems' field.
   * @return List of subsystems of the satellite
   */
  public java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> getListSubsystems() {
    return listSubsystems;
  }


  /**
   * Sets the value of the 'listSubsystems' field.
   * List of subsystems of the satellite
   * @param value the value to set.
   */
  public void setListSubsystems(java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> value) {
    this.listSubsystems = value;
  }

  /**
   * Creates a new Satellite RecordBuilder.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.Satellite.Builder newBuilder() {
    return new com.incomplete.cubegs.common.avro.data_model.Satellite.Builder();
  }

  /**
   * Creates a new Satellite RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.Satellite.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.Satellite.Builder other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.Satellite.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.Satellite.Builder(other);
    }
  }

  /**
   * Creates a new Satellite RecordBuilder by copying an existing Satellite instance.
   * @param other The existing instance to copy.
   * @return A new Satellite RecordBuilder
   */
  public static com.incomplete.cubegs.common.avro.data_model.Satellite.Builder newBuilder(com.incomplete.cubegs.common.avro.data_model.Satellite other) {
    if (other == null) {
      return new com.incomplete.cubegs.common.avro.data_model.Satellite.Builder();
    } else {
      return new com.incomplete.cubegs.common.avro.data_model.Satellite.Builder(other);
    }
  }

  /**
   * RecordBuilder for Satellite instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Satellite>
    implements org.apache.avro.data.RecordBuilder<Satellite> {

    /** Name of the satellite */
    private java.lang.String name;
    /** Name of the mission */
    private java.lang.String missionName;
    /** Description of the satellite */
    private java.lang.String description;
    /** Short code of the satellite */
    private java.lang.String code;
    /** Launch date. Format: YYYY-MM-DDTHH:mm:SS */
    private java.lang.String launchDate;
    /** List of subsystems of the satellite */
    private java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> listSubsystems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.Satellite.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.missionName)) {
        this.missionName = data().deepCopy(fields()[1].schema(), other.missionName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.launchDate)) {
        this.launchDate = data().deepCopy(fields()[4].schema(), other.launchDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.listSubsystems)) {
        this.listSubsystems = data().deepCopy(fields()[5].schema(), other.listSubsystems);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Satellite instance
     * @param other The existing instance to copy.
     */
    private Builder(com.incomplete.cubegs.common.avro.data_model.Satellite other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.missionName)) {
        this.missionName = data().deepCopy(fields()[1].schema(), other.missionName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.launchDate)) {
        this.launchDate = data().deepCopy(fields()[4].schema(), other.launchDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.listSubsystems)) {
        this.listSubsystems = data().deepCopy(fields()[5].schema(), other.listSubsystems);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the satellite
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Name of the satellite
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the satellite
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'missionName' field.
      * Name of the mission
      * @return The value.
      */
    public java.lang.String getMissionName() {
      return missionName;
    }


    /**
      * Sets the value of the 'missionName' field.
      * Name of the mission
      * @param value The value of 'missionName'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setMissionName(java.lang.String value) {
      validate(fields()[1], value);
      this.missionName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'missionName' field has been set.
      * Name of the mission
      * @return True if the 'missionName' field has been set, false otherwise.
      */
    public boolean hasMissionName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'missionName' field.
      * Name of the mission
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearMissionName() {
      missionName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the satellite
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Description of the satellite
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the satellite
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Short code of the satellite
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * Short code of the satellite
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setCode(java.lang.String value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Short code of the satellite
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * Short code of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return The value.
      */
    public java.lang.String getLaunchDate() {
      return launchDate;
    }


    /**
      * Sets the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @param value The value of 'launchDate'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setLaunchDate(java.lang.String value) {
      validate(fields()[4], value);
      this.launchDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'launchDate' field has been set.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return True if the 'launchDate' field has been set, false otherwise.
      */
    public boolean hasLaunchDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'launchDate' field.
      * Launch date. Format: YYYY-MM-DDTHH:mm:SS
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearLaunchDate() {
      launchDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @return The value.
      */
    public java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> getListSubsystems() {
      return listSubsystems;
    }


    /**
      * Sets the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @param value The value of 'listSubsystems'.
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder setListSubsystems(java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> value) {
      validate(fields()[5], value);
      this.listSubsystems = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'listSubsystems' field has been set.
      * List of subsystems of the satellite
      * @return True if the 'listSubsystems' field has been set, false otherwise.
      */
    public boolean hasListSubsystems() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'listSubsystems' field.
      * List of subsystems of the satellite
      * @return This builder.
      */
    public com.incomplete.cubegs.common.avro.data_model.Satellite.Builder clearListSubsystems() {
      listSubsystems = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Satellite build() {
      try {
        Satellite record = new Satellite();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.missionName = fieldSetFlags()[1] ? this.missionName : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (java.lang.String) defaultValue(fields()[3]);
        record.launchDate = fieldSetFlags()[4] ? this.launchDate : (java.lang.String) defaultValue(fields()[4]);
        record.listSubsystems = fieldSetFlags()[5] ? this.listSubsystems : (java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Satellite>
    WRITER$ = (org.apache.avro.io.DatumWriter<Satellite>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Satellite>
    READER$ = (org.apache.avro.io.DatumReader<Satellite>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.missionName);

    out.writeString(this.description);

    out.writeString(this.code);

    out.writeString(this.launchDate);

    if (this.listSubsystems == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.listSubsystems.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.incomplete.cubegs.common.avro.data_model.Subsystem e0: this.listSubsystems) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      this.missionName = in.readString();

      this.description = in.readString();

      this.code = in.readString();

      this.launchDate = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.listSubsystems = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> a0 = this.listSubsystems;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem>((int)size0, SCHEMA$.getField("listSubsystems").schema().getTypes().get(1));
          this.listSubsystems = a0;
        } else a0.clear();
        SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.incomplete.cubegs.common.avro.data_model.Subsystem e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.incomplete.cubegs.common.avro.data_model.Subsystem();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          this.missionName = in.readString();
          break;

        case 2:
          this.description = in.readString();
          break;

        case 3:
          this.code = in.readString();
          break;

        case 4:
          this.launchDate = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.listSubsystems = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.incomplete.cubegs.common.avro.data_model.Subsystem> a0 = this.listSubsystems;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem>((int)size0, SCHEMA$.getField("listSubsystems").schema().getTypes().get(1));
              this.listSubsystems = a0;
            } else a0.clear();
            SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.incomplete.cubegs.common.avro.data_model.Subsystem>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.incomplete.cubegs.common.avro.data_model.Subsystem e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.incomplete.cubegs.common.avro.data_model.Subsystem();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










